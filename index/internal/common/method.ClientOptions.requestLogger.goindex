package github.com/hashicorp/terraform-provider-azuread/internal/common
import (
	"context"
	"fmt"
	"log"
	"net/http"
	"net/http/httputil"
	"os"
	"strings"

	"github.com/hashicorp/go-azure-sdk/sdk/auth"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/meta"
	"github.com/hashicorp/terraform-provider-azuread/version"
	"github.com/manicminer/hamilton/msgraph"
)
func (o ClientOptions) requestLogger(req *http.Request) (*http.Request, error) {
	if req == nil {
		return nil, nil
	}

	requestId, err := uuid.GenerateUUID()
	if err != nil {
		return nil, err
	}

	ctx := req.Context()
	newReq := req.WithContext(context.WithValue(ctx, contextKey("requestId"), requestId))

	// Don't log the Authorization header
	authHeaderName := "Authorization"
	authHeaderValue := newReq.Header.Get(authHeaderName)
	if authHeaderValue != "" {
		newReq.Header.Del(authHeaderName)
	}

	if dump, err := httputil.DumpRequestOut(newReq, true); err == nil {
		log.Printf(`[DEBUG] ============================ Begin AzureAD Request ============================
Request ID: %s

%s
============================= End AzureAD Request =============================
`, requestId, dump)
	} else {
		// fallback to basic message
		log.Printf("[DEBUG] AzureAD Request %s: %s %s\n", requestId, newReq.Method, newReq.URL)
	}

	if authHeaderValue != "" {
		newReq.Header.Add(authHeaderName, authHeaderValue)
	}
	return newReq, nil
}
