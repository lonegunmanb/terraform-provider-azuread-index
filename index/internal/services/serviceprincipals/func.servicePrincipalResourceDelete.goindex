package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func servicePrincipalResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalsClient
	servicePrincipalId := d.Id()

	_, status, err := client.Get(ctx, servicePrincipalId, odata.Query{})
	if err != nil {
		if status == http.StatusNotFound {
			return tf.ErrorDiagPathF(fmt.Errorf("Service Principal was not found"), "id", "Retrieving service principal with object ID %q", servicePrincipalId)
		}

		return tf.ErrorDiagPathF(err, "id", "Retrieving service principal with object ID %q", servicePrincipalId)
	}

	useExisting := d.Get("use_existing").(bool)
	status, err = client.Delete(ctx, servicePrincipalId)
	if !useExisting {
		if err != nil && !useExisting {
			return tf.ErrorDiagPathF(err, "id", "Deleting service principal with object ID %q, got status %d", servicePrincipalId, status)
		}

		// Wait for service principal object to be deleted
		if err := helpers.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
			defer func() { client.BaseClient.DisableRetries = false }()
			client.BaseClient.DisableRetries = true
			if _, status, err := client.Get(ctx, servicePrincipalId, odata.Query{}); err != nil {
				if status == http.StatusNotFound {
					return pointer.To(false), nil
				}
				return nil, err
			}
			return pointer.To(true), nil
		}); err != nil {
			return tf.ErrorDiagF(err, "Waiting for deletion of group with object ID %q", servicePrincipalId)
		}
	}

	return nil
}
