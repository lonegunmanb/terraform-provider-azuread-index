package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/parse"
)
func servicePrincipalTokenSigningCertificateResource() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		CreateContext: servicePrincipalTokenSigningCertificateResourceCreate,
		ReadContext:   servicePrincipalTokenSigningCertificateResourceRead,
		DeleteContext: servicePrincipalTokenSigningCertificateResourceDelete,

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(5 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(5 * time.Minute),
		},

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.SigningCertificateID(id)
			return err
		}),

		Schema: map[string]*pluginsdk.Schema{
			"service_principal_id": {
				Description:  "The ID of the service principal for which this certificate should be created",
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: stable.ValidateServicePrincipalID,
			},

			"display_name": {
				Description:  "A friendly name for the certificate",
				Type:         pluginsdk.TypeString,
				Optional:     true,
				Computed:     true,
				ForceNew:     true,
				ValidateFunc: validation.StringMatch(regexp.MustCompile("^CN=.+$|^$"), ""),
			},

			"end_date": {
				Description:  "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Default is 3 years from current date.",
				Type:         pluginsdk.TypeString,
				Optional:     true,
				Computed:     true,
				ForceNew:     true,
				ValidateFunc: validation.IsRFC3339Time,
			},

			"key_id": {
				Description: "A UUID used to uniquely identify the verify certificate.",
				Type:        pluginsdk.TypeString,
				Computed:    true,
			},

			"thumbprint": {
				Description: "The thumbprint of the certificate.",
				Type:        pluginsdk.TypeString,
				Computed:    true,
			},

			"start_date": {
				Description: "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).",
				Type:        pluginsdk.TypeString,
				Computed:    true,
			},

			"value": {
				Description: "The certificate data, which is PEM encoded but does not include the header/footer",
				Type:        pluginsdk.TypeString,
				Computed:    true,
				Sensitive:   true,
			},
		},
	}
}
