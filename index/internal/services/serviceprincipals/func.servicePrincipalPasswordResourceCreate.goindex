package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"encoding/base64"
	"errors"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/migrations"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/parse"
)
func servicePrincipalPasswordResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient
	servicePrincipalId := stable.NewServicePrincipalID(d.Get("service_principal_id").(string))

	credential, err := credentials.PasswordCredentialForResource(d)
	if err != nil {
		attr := ""
		if kerr, ok := err.(credentials.CredentialError); ok {
			attr = kerr.Attr()
		}
		return tf.ErrorDiagPathF(err, attr, "Generating password credentials for %s", servicePrincipalId)
	}
	if credential == nil {
		return tf.ErrorDiagF(errors.New("nil credential was returned"), "Generating password credentials for %s", servicePrincipalId)
	}

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	properties := serviceprincipal.AddPasswordRequest{
		PasswordCredential: credential,
	}
	resp, err := client.AddPassword(ctx, servicePrincipalId, properties, serviceprincipal.DefaultAddPasswordOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Adding password for %s", servicePrincipalId)
	}

	newCredential := resp.Model
	if newCredential == nil {
		return tf.ErrorDiagF(errors.New("nil credential received when adding password"), "API error adding password for %s", servicePrincipalId)
	}
	if newCredential.KeyId.GetOrZero() == "" {
		return tf.ErrorDiagF(errors.New("nil or empty keyId received"), "API error adding password for %s", servicePrincipalId)
	}
	if newCredential.SecretText.GetOrZero() == "" {
		return tf.ErrorDiagF(errors.New("nil or empty password received"), "API error adding password for %s", servicePrincipalId)
	}

	id := parse.NewCredentialID(servicePrincipalId.ServicePrincipalId, "password", newCredential.KeyId.GetOrZero())

	// Wait for the credential to appear in the service principal manifest, this can take several minutes
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
		if err != nil {
			return pointer.To(false), err
		}

		servicePrincipal := resp.Model
		if servicePrincipal == nil {
			return pointer.To(false), nil
		}

		credential := credentials.GetPasswordCredential(servicePrincipal.PasswordCredentials, id.KeyId)
		return pointer.To(credential != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for password credential for %s", servicePrincipalId)
	}

	d.SetId(id.String())
	tf.Set(d, "value", newCredential.SecretText.GetOrZero())

	return servicePrincipalPasswordResourceRead(ctx, d, meta)
}
