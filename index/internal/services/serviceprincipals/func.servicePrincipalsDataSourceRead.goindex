package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"crypto/sha1"
	"encoding/base64"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	serviceprincipalBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
)
func servicePrincipalsDataSourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient
	clientBeta := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClientBeta

	var servicePrincipals []stable.ServicePrincipal
	var expectedCount int
	ignoreMissing := d.Get("ignore_missing").(bool)
	returnAll := d.Get("return_all").(bool)

	fieldsToSelect := []string{
		"accountEnabled",
		"appId",
		"appOwnerOrganizationId",
		"appRoleAssignmentRequired",
		"displayName",
		"id",
		"preferredSingleSignOnMode",
		"servicePrincipalNames",
		"servicePrincipalType",
		"signInAudience",
		"tags",
	}

	clientIdsToSearch := tf.ExpandStringSlice(d.Get("client_ids").([]interface{}))
	if returnAll {
		resp, err := client.ListServicePrincipals(ctx, serviceprincipal.ListServicePrincipalsOperationOptions{Select: &fieldsToSelect})
		if err != nil {
			return tf.ErrorDiagF(err, "Could not retrieve service principals")
		}
		if resp.Model == nil {
			return tf.ErrorDiagF(errors.New("API returned nil result"), "Bad API Response")
		}
		if len(*resp.Model) == 0 {
			return tf.ErrorDiagPathF(err, "return_all", "No service principals found")
		}

		servicePrincipals = append(servicePrincipals, *resp.Model...)

	} else if len(clientIdsToSearch) > 0 {
		expectedCount = len(clientIdsToSearch)
		for _, v := range clientIdsToSearch {
			options := serviceprincipal.ListServicePrincipalsOperationOptions{
				Filter: pointer.To(fmt.Sprintf("appId eq '%s'", odata.EscapeSingleQuote(v))),
				Select: &fieldsToSelect,
			}
			resp, err := client.ListServicePrincipals(ctx, options)
			if err != nil {
				return tf.ErrorDiagF(err, "Finding service principals with application ID: %q", v)
			}
			if resp.Model == nil {
				return tf.ErrorDiagF(errors.New("API returned nil result"), "Bad API Response")
			}

			count := len(*resp.Model)
			if count > 1 {
				return tf.ErrorDiagPathF(nil, "mail_nicknames", "More than one service principal found with application ID: %q", v)
			} else if count == 0 {
				if ignoreMissing {
					continue
				}
				return tf.ErrorDiagPathF(err, "mail_nicknames", "Service principal not found with application ID: %q", v)
			}

			servicePrincipals = append(servicePrincipals, (*resp.Model)[0])
		}

	} else if displayNames, ok := d.Get("display_names").([]interface{}); ok && len(displayNames) > 0 {
		expectedCount = len(displayNames)
		for _, v := range tf.ExpandStringSlice(displayNames) {
			options := serviceprincipal.ListServicePrincipalsOperationOptions{
				Filter: pointer.To(fmt.Sprintf("displayName eq '%s'", odata.EscapeSingleQuote(v))),
				Select: &fieldsToSelect,
			}
			resp, err := client.ListServicePrincipals(ctx, options)
			if err != nil {
				return tf.ErrorDiagF(err, "Finding service principals with display name: %q", v)
			}
			if resp.Model == nil {
				return tf.ErrorDiagF(errors.New("API returned nil result"), "Bad API Response")
			}
			if l := len(*resp.Model); l > 1 {
				return tf.ErrorDiagF(errors.New("more than one service principal returned with this display name"), "Finding service principals with display name: %q", v)
			} else if l == 0 {
				if ignoreMissing {
					continue
				}
				return tf.ErrorDiagPathF(err, "display_names", "No service principals with display name %q were found", v)
			}

			servicePrincipals = append(servicePrincipals, (*resp.Model)[0])
		}

	} else if objectIds, ok := d.Get("object_ids").([]interface{}); ok && len(objectIds) > 0 {
		expectedCount = len(objectIds)
		for _, v := range objectIds {
			resp, err := client.GetServicePrincipal(ctx, stable.NewServicePrincipalID(v.(string)), serviceprincipal.GetServicePrincipalOperationOptions{Select: &fieldsToSelect})
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					if ignoreMissing {
						continue
					}
					return tf.ErrorDiagPathF(nil, "object_id", "Service principal not found with object ID: %q", v)
				}
				return tf.ErrorDiagF(err, "Retrieving service principal with object ID: %q", v)
			}
			if resp.Model == nil {
				return tf.ErrorDiagPathF(nil, "object_id", "Service principal not found with object ID: %q", v)
			}

			servicePrincipals = append(servicePrincipals, *resp.Model)
		}
	}

	// Check that the right number of service principals were returned
	if !returnAll && !ignoreMissing && len(servicePrincipals) != expectedCount {
		return tf.ErrorDiagF(fmt.Errorf("expected: %d, actual: %d", expectedCount, len(servicePrincipals)), "Unexpected number of service principals returned")
	}

	clientIds := make([]string, 0)
	displayNames := make([]string, 0)
	objectIds := make([]string, 0)
	spList := make([]map[string]interface{}, 0)
	for _, s := range servicePrincipals {
		if s.Id == nil || s.DisplayName == nil {
			return tf.ErrorDiagF(errors.New("API returned service principal with nil object ID or displayName"), "Bad API Response")
		}

		objectIds = append(objectIds, *s.Id)
		displayNames = append(displayNames, s.DisplayName.GetOrZero())
		if s.AppId != nil {
			clientIds = append(clientIds, s.AppId.GetOrZero())
		}

		servicePrincipalNames := make([]string, 0)
		if s.ServicePrincipalNames != nil {
			for _, name := range *s.ServicePrincipalNames {
				// Exclude the app ID from the list of service principal names
				if !strings.EqualFold(name, s.AppId.GetOrZero()) {
					servicePrincipalNames = append(servicePrincipalNames, name)
				}
			}
		}

		// Retrieve from beta API to get samlMetadataUrl field, intentionally don't retry and fail gracefully on error
		var servicePrincipalBeta beta.ServicePrincipal
		options := serviceprincipalBeta.GetServicePrincipalOperationOptions{
			Select: pointer.To([]string{"samlMetadataUrl"}),
		}
		betaId := beta.NewServicePrincipalID(*s.Id)
		resp, err := clientBeta.GetServicePrincipal(ctx, betaId, options)
		if err != nil || resp.Model == nil {
			log.Printf("[DEBUG] Failed to retrieve `samlMetadataUrl` using beta API for %s", betaId)
		} else {
			servicePrincipalBeta = *resp.Model
		}

		sp := make(map[string]interface{})
		sp["account_enabled"] = s.AccountEnabled.GetOrZero()
		sp["display_name"] = s.DisplayName.GetOrZero()
		sp["app_role_assignment_required"] = pointer.From(s.AppRoleAssignmentRequired)
		sp["application_tenant_id"] = s.AppOwnerOrganizationId.GetOrZero()
		sp["client_id"] = s.AppId.GetOrZero()
		sp["object_id"] = pointer.From(s.Id)
		sp["preferred_single_sign_on_mode"] = s.PreferredSingleSignOnMode.GetOrZero()
		sp["saml_metadata_url"] = servicePrincipalBeta.SamlMetadataUrl.GetOrZero()
		sp["service_principal_names"] = servicePrincipalNames
		sp["sign_in_audience"] = s.SignInAudience.GetOrZero()
		sp["tags"] = pointer.From(s.Tags)
		sp["type"] = s.ServicePrincipalType.GetOrZero()
		spList = append(spList, sp)
	}

	// Generate a unique ID based on result
	h := sha1.New()
	if _, err := h.Write([]byte(strings.Join(objectIds, "/"))); err != nil {
		return tf.ErrorDiagF(err, "Unable to compute hash for object IDs")
	}

	d.SetId("serviceprincipals#" + base64.URLEncoding.EncodeToString(h.Sum(nil)))
	tf.Set(d, "client_ids", clientIds)
	tf.Set(d, "display_names", displayNames)
	tf.Set(d, "object_ids", objectIds)
	tf.Set(d, "service_principals", spList)

	return nil
}
