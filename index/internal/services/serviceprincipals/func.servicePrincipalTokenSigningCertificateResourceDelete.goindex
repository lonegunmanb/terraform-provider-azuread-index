package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/parse"
)
func servicePrincipalTokenSigningCertificateResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	id, err := parse.SigningCertificateID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing certificate credential with ID %q", d.Id())
	}

	servicePrincipalId := stable.NewServicePrincipalID(id.ObjectId)

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return tf.ErrorDiagPathF(fmt.Errorf("Service Principal was not found"), "service_principal_id", "Retrieving %s", servicePrincipalId)
		}
		return tf.ErrorDiagPathF(err, "service_principal_id", "Retrieving %s", servicePrincipalId)
	}

	servicePrincipal := resp.Model
	if servicePrincipal == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", servicePrincipalId)
	}

	// use CustomKeyIdentifier to determine which certs and passwords are associated
	customKeyId := ""
	newKeyCredentials := make([]stable.KeyCredential, 0)
	if servicePrincipal.KeyCredentials != nil {
		for _, cred := range *servicePrincipal.KeyCredentials {
			if !strings.EqualFold(cred.KeyId.GetOrZero(), id.KeyId) {
				customKeyId = cred.CustomKeyIdentifier.GetOrZero()
			}
		}
		for _, cred := range *servicePrincipal.KeyCredentials {
			if !strings.EqualFold(cred.CustomKeyIdentifier.GetOrZero(), customKeyId) {
				newKeyCredentials = append(newKeyCredentials, cred)
			}
		}
	}

	newPasswordCredentials := make([]stable.PasswordCredential, 0)
	if servicePrincipal.PasswordCredentials != nil {
		for _, cred := range *servicePrincipal.PasswordCredentials {
			if !strings.EqualFold(cred.CustomKeyIdentifier.GetOrZero(), customKeyId) {
				newPasswordCredentials = append(newPasswordCredentials, cred)
			}
		}
	}

	properties := stable.ServicePrincipal{
		KeyCredentials:      &newKeyCredentials,
		PasswordCredentials: &newPasswordCredentials,
	}
	if _, err := client.UpdateServicePrincipal(ctx, servicePrincipalId, properties, serviceprincipal.DefaultUpdateServicePrincipalOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Removing token signing certificate credentials %q from %s", id.KeyId, servicePrincipalId)
	}

	// Wait for service principal token signing certificate to be deleted
	if err := consistency.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
		if err != nil {
			return nil, err
		}

		servicePrincipal := resp.Model
		if servicePrincipal == nil {
			return nil, errors.New("model was nil")
		}

		credential := credentials.GetKeyCredential(servicePrincipal.KeyCredentials, id.KeyId)
		return pointer.To(credential != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for deletion of token signing certificate credential %q %s", id.KeyId, servicePrincipalId)
	}

	return nil
}
