package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/parse"
)
func servicePrincipalTokenSigningCertificateResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient
	servicePrincipalId := stable.NewServicePrincipalID(d.Get("service_principal_id").(string))

	properties := serviceprincipal.AddTokenSigningCertificateRequest{}

	if v, ok := d.GetOk("display_name"); ok {
		properties.DisplayName = nullable.NoZero(v.(string))
	}

	if v, ok := d.GetOk("end_date"); ok {
		properties.EndDateTime = nullable.NoZero(v.(string))
	}

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	resp, err := client.AddTokenSigningCertificate(ctx, servicePrincipalId, properties, serviceprincipal.DefaultAddTokenSigningCertificateOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Could not add token signing certificate to %s", servicePrincipalId)
	}

	key := resp.Model
	if key == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "API error adding token signing certificate for %s", servicePrincipalId)
	}

	// Wait for the credential to appear in the service principal manifest, this can take several minutes
	timeout, _ := ctx.Deadline()
	polledForCredential, err := (&pluginsdk.StateChangeConf{ //nolint:staticcheck
		Pending:                   []string{"Waiting"},
		Target:                    []string{"Done"},
		Timeout:                   time.Until(timeout),
		MinTimeout:                1 * time.Second,
		ContinuousTargetOccurence: 5,
		Refresh: func() (interface{}, string, error) {
			resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
			if err != nil {
				return nil, "Error", err
			}

			servicePrincipal := resp.Model
			if servicePrincipal == nil {
				return nil, "Error", errors.New("model was nil")
			}

			if servicePrincipal.KeyCredentials != nil {
				for _, cred := range *servicePrincipal.KeyCredentials {
					if strings.EqualFold(cred.KeyId.GetOrZero(), key.KeyId.GetOrZero()) {
						return &cred, "Done", nil
					}
				}
			}

			return nil, "Waiting", nil
		},
	}).WaitForStateContext(ctx)

	if err != nil {
		return tf.ErrorDiagF(err, "Waiting for token signing certificate credential for %s", servicePrincipalId)
	} else if polledForCredential == nil {
		return tf.ErrorDiagF(errors.New("certificate credential not found in service principal manifest"), "Waiting for certificate credential for %s", servicePrincipalId)
	}

	// Workaround b/c the returned keyId is for the Sign key, rather than Verify key,
	// so we need to get the Verify keyId based on the customKeyIdentifier
	servicePrincipalResponse, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving %s", servicePrincipalId)
	}

	servicePrincipal := servicePrincipalResponse.Model
	if servicePrincipal == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", servicePrincipalId)
	}

	credential := credentials.GetVerifyKeyCredentialFromCustomKeyId(servicePrincipal.KeyCredentials, key.CustomKeyIdentifier.GetOrZero())
	if credential == nil {
		return tf.ErrorDiagF(errors.New("returned credential was nil"), "Could not determine key ID for newly added token signing certificate for %s", servicePrincipalId)
	}

	id := parse.NewCredentialID(servicePrincipalId.ServicePrincipalId, "tokenSigningCertificate", credential.KeyId.GetOrZero())
	d.SetId(id.String())

	return servicePrincipalTokenSigningCertificateResourceRead(ctx, d, meta)
}
