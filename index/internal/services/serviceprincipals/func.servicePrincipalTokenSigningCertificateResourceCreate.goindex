package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func servicePrincipalTokenSigningCertificateResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalsClient
	objectId := d.Get("service_principal_id").(string)

	keyCreds := msgraph.KeyCredential{}
	if v, ok := d.GetOk("display_name"); ok {
		keyCreds.DisplayName = pointer.To(v.(string))
	}

	if v, ok := d.GetOk("end_date"); ok {
		endDate, err := time.Parse(time.RFC3339, v.(string))
		if err != nil {
			tf.ErrorDiagF(err, "Unable to parse the provided end_date %q: %+v", v, err)
		}
		keyCreds.EndDateTime = &endDate
	}

	tf.LockByName(servicePrincipalResourceName, objectId)
	defer tf.UnlockByName(servicePrincipalResourceName, objectId)

	key, _, err := client.AddTokenSigningCertificate(ctx, objectId, keyCreds)
	if err != nil {
		return tf.ErrorDiagF(err, "Could not add token signing certificate to service principal with object ID: %q", objectId)
	}

	// Wait for the credential to appear in the service principal manifest, this can take several minutes
	timeout, _ := ctx.Deadline()
	polledForCredential, err := (&pluginsdk.StateChangeConf{ //nolint:staticcheck
		Pending:                   []string{"Waiting"},
		Target:                    []string{"Done"},
		Timeout:                   time.Until(timeout),
		MinTimeout:                1 * time.Second,
		ContinuousTargetOccurence: 5,
		Refresh: func() (interface{}, string, error) {
			servicePrincipal, _, err := client.Get(ctx, objectId, odata.Query{})
			if err != nil {
				return nil, "Error", err
			}

			if servicePrincipal.KeyCredentials != nil {
				for _, cred := range *servicePrincipal.KeyCredentials {
					if cred.KeyId != nil && strings.EqualFold(*cred.KeyId, *key.KeyId) {
						return &cred, "Done", nil
					}
				}
			}

			return nil, "Waiting", nil
		},
	}).WaitForStateContext(ctx)

	if err != nil {
		return tf.ErrorDiagF(err, "Waiting for token_signing_certificate credential for service principal with object ID %q", objectId)
	} else if polledForCredential == nil {
		return tf.ErrorDiagF(errors.New("certificate credential not found in service principal manifest"), "Waiting for certificate credential for service principal with object ID %q", objectId)
	}

	// Workaround b/c the returned keyId is for the Sign key, rather than Verify key,
	// so we need to get the Verify keyId based on the customKeyIdentifier
	servicePrincipal, _, err := client.Get(ctx, objectId, odata.Query{})
	if err != nil {
		return tf.ErrorDiagF(err, "Could not get service principal with object ID: %q", objectId)
	}
	credential := helpers.GetVerifyKeyCredentialFromCustomKeyId(servicePrincipal.KeyCredentials, *key.CustomKeyIdentifier)

	if credential == nil {
		return tf.ErrorDiagF(errors.New("returned credential was nil"), "Could not determine key ID for newly added token signing certificate on service principal %q", objectId)
	}
	id := parse.NewCredentialID(objectId, "tokenSigningCertificate", *credential.KeyId)

	d.SetId(id.String())

	return servicePrincipalTokenSigningCertificateResourceRead(ctx, d, meta)
}
