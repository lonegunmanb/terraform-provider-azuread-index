package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/oauth2permissiongrants/stable/oauth2permissiongrant"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals/migrations"
)
func servicePrincipalDelegatedPermissionGrantResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.OAuth2PermissionGrantClient
	servicePrincipalClient := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	servicePrincipalId := stable.NewServicePrincipalID(d.Get("service_principal_object_id").(string))
	resourcePrincipalId := stable.NewServicePrincipalID(d.Get("resource_service_principal_object_id").(string))

	if resp, err := servicePrincipalClient.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions()); err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return tf.ErrorDiagPathF(err, "principal_object_id", "%s was not found)", servicePrincipalId)
		}
		return tf.ErrorDiagF(err, "Could not retrieve %s", servicePrincipalId)
	}

	if resp, err := servicePrincipalClient.GetServicePrincipal(ctx, resourcePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions()); err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return tf.ErrorDiagPathF(err, "principal_object_id", "%s not found for resource", resourcePrincipalId)
		}
		return tf.ErrorDiagF(err, "Could not retrieve %s for resource", resourcePrincipalId)
	}

	properties := stable.OAuth2PermissionGrant{
		ClientId:   servicePrincipalId.ServicePrincipalId,
		ResourceId: pointer.To(resourcePrincipalId.ServicePrincipalId),
		Scope:      nullable.NoZero(strings.Join(tf.ExpandStringSlice(d.Get("claim_values").(*pluginsdk.Set).List()), " ")),
	}

	if v, ok := d.GetOk("user_object_id"); ok && v.(string) != "" {
		properties.PrincipalId = nullable.NoZero(v.(string))
		properties.ConsentType = nullable.Value(DelegatedPermissionGrantConsentTypePrincipal)
	} else {
		properties.ConsentType = nullable.Value(DelegatedPermissionGrantConsentTypeAllPrincipals)
	}

	options := oauth2permissiongrant.CreateOAuth2PermissionGrantOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			if response.WasNotFound(resp) {
				return true, nil
			} else if response.WasBadRequest(resp) && o != nil && o.Error != nil {
				return o.Error.Match("does not exist or one of its queried reference-property objects are not present"), nil
			}
			return false, nil
		},
	}

	resp, err := client.CreateOAuth2PermissionGrant(ctx, properties, options)
	if err != nil {
		return tf.ErrorDiagF(err, "Could not create delegated permission grant")
	}

	delegatedPermissionGrant := resp.Model
	if delegatedPermissionGrant == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Could not create delegated permission grant")
	}
	if delegatedPermissionGrant.Id == nil || *delegatedPermissionGrant.Id == "" {
		return tf.ErrorDiagF(errors.New("ID returned for delegated permission grant is nil"), "Bad API response")
	}

	id := stable.NewOAuth2PermissionGrantID(*delegatedPermissionGrant.Id)
	d.SetId(id.ID())

	return servicePrincipalDelegatedPermissionGrantResourceRead(ctx, d, meta)
}
