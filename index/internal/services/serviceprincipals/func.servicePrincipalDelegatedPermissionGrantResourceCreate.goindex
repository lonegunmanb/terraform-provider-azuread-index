package github.com/hashicorp/terraform-provider-azuread/internal/services/serviceprincipals
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func servicePrincipalDelegatedPermissionGrantResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.DelegatedPermissionGrantsClient
	servicePrincipalsClient := meta.(*clients.Client).ServicePrincipals.ServicePrincipalsClient

	servicePrincipalId := d.Get("service_principal_object_id").(string)
	resourceId := d.Get("resource_service_principal_object_id").(string)

	if _, status, err := servicePrincipalsClient.Get(ctx, servicePrincipalId, odata.Query{}); err != nil {
		if status == http.StatusNotFound {
			return tf.ErrorDiagPathF(err, "principal_object_id", "Service principal with object ID %q was not found)", servicePrincipalId)
		}
		return tf.ErrorDiagF(err, "Could not retrieve service principal with object ID %q", servicePrincipalId)
	}

	if _, status, err := servicePrincipalsClient.Get(ctx, resourceId, odata.Query{}); err != nil {
		if status == http.StatusNotFound {
			return tf.ErrorDiagPathF(err, "principal_object_id", "Service principal not found for resource (Object ID: %q)", resourceId)
		}
		return tf.ErrorDiagF(err, "Could not retrieve service principal for resource (Object ID: %q)", resourceId)
	}

	properties := msgraph.DelegatedPermissionGrant{
		ClientId:   pointer.To(servicePrincipalId),
		ResourceId: pointer.To(resourceId),
		Scopes:     tf.ExpandStringSlicePtr(d.Get("claim_values").(*pluginsdk.Set).List()),
	}

	if v, ok := d.GetOk("user_object_id"); ok && v.(string) != "" {
		properties.PrincipalId = pointer.To(v.(string))
		properties.ConsentType = pointer.To(msgraph.DelegatedPermissionGrantConsentTypePrincipal)
	} else {
		properties.ConsentType = pointer.To(msgraph.DelegatedPermissionGrantConsentTypeAllPrincipals)
	}

	delegatedPermissionGrant, _, err := client.Create(ctx, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Could not create delegated permission grant")
	}

	if delegatedPermissionGrant.Id == nil || *delegatedPermissionGrant.Id == "" {
		return tf.ErrorDiagF(errors.New("ID returned for delegated permission grant is nil"), "Bad API response")
	}

	d.SetId(*delegatedPermissionGrant.Id)

	return servicePrincipalDelegatedPermissionGrantResourceRead(ctx, d, meta)
}
