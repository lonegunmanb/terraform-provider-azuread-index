package github.com/hashicorp/terraform-provider-azuread/internal/services/invitations
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/invitations/stable/invitation"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
)
func invitationResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Invitations.InvitationClient
	userClient := meta.(*clients.Client).Invitations.UserClient

	properties := stable.Invitation{
		InvitedUserEmailAddress: d.Get("user_email_address").(string),
		InviteRedirectUrl:       d.Get("redirect_url").(string),
		InvitedUserType:         nullable.Value(d.Get("user_type").(string)),
	}

	if v, ok := d.GetOk("user_display_name"); ok {
		properties.InvitedUserDisplayName = nullable.Value(v.(string))
	}

	if v, ok := d.GetOk("message"); ok {
		properties.SendInvitationMessage = nullable.Value(true)
		properties.InvitedUserMessageInfo = expandInvitedUserMessageInfo(v.([]interface{}))
	}

	resp, err := client.CreateInvitation(ctx, properties, invitation.DefaultCreateInvitationOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Creating invitation")
	}

	invite := resp.Model
	if invite == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Creating invitation")
	}

	if invite.Id == nil || *invite.Id == "" {
		return tf.ErrorDiagF(errors.New("Bad API response"), "Object ID returned for invitation is nil/empty")
	}

	d.SetId(*invite.Id)

	if invite.InvitedUser == nil || invite.InvitedUser.Id == nil || *invite.InvitedUser.Id == "" {
		return tf.ErrorDiagF(errors.New("Bad API response"), "Invited user object ID returned for invitation is nil/empty")
	}

	userId := stable.NewUserID(*invite.InvitedUser.Id)
	d.Set("user_id", userId.UserId)

	if invite.InviteRedeemUrl.GetOrZero() == "" {
		return tf.ErrorDiagF(errors.New("Bad API response"), "Redeem URL returned for invitation is nil/empty")
	}
	d.Set("redeem_url", invite.InviteRedeemUrl.GetOrZero())

	// Attempt to patch the newly created guest user, which will tell us whether it exists yet
	// The SDK handles retries for us here in the event of 404, 429 or 5xx, then returns after giving up
	uid, err := uuid.GenerateUUID()
	if err != nil {
		return tf.ErrorDiagF(err, "Failed to generate a UUID")
	}
	tempCompanyName := fmt.Sprintf("TERRAFORM_UPDATE_%s", uid)

	userResp, err := userClient.UpdateUser(ctx, userId, stable.User{
		CompanyName: nullable.NoZero(tempCompanyName),
	}, user.UpdateUserOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			return response.WasNotFound(resp) || response.WasStatusCode(resp, 500) || response.WasStatusCode(resp, 503), nil
		},
	})
	if err != nil {
		if response.WasNotFound(userResp.HttpResponse) {
			return tf.ErrorDiagF(err, "Timed out whilst waiting for new guest user to be replicated in Azure AD")
		}
		return tf.ErrorDiagF(err, "Failed to patch guest user (1) after creating invitation")
	}

	userResp, err = userClient.UpdateUser(ctx, userId, stable.User{
		CompanyName: nullable.NoZero(""),
	}, user.DefaultUpdateUserOperationOptions())
	if err != nil {
		if response.WasNotFound(userResp.HttpResponse) {
			return tf.ErrorDiagF(err, "Timed out whilst waiting for new guest user to be replicated in Azure AD")
		}
		return tf.ErrorDiagF(err, "Failed to patch guest user (2) after creating invitation")
	}

	return invitationResourceRead(ctx, d, meta)
}
