package github.com/hashicorp/terraform-provider-azuread/internal/services/groups
import (
	"context"
	"fmt"
	"math/rand"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	groupBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group"
	memberBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/member"
)
func groupFindByName(ctx context.Context, client *groupBeta.GroupClient, displayName string) (*[]beta.Group, error) {
	options := groupBeta.ListGroupsOperationOptions{
		Filter: pointer.To(fmt.Sprintf("displayName eq '%s'", displayName)),
	}

	resp, err := client.ListGroups(ctx, options)
	if err != nil {
		return nil, fmt.Errorf("unable to list Groups with filter %q: %v", *options.Filter, err)
	}

	result := make([]beta.Group, 0)
	if resp.Model != nil {
		for _, group := range *resp.Model {
			if group.DisplayName != nil && group.DisplayName.GetOrZero() == displayName {
				result = append(result, group)
			}
		}
	}

	return &result, nil
}
