package github.com/hashicorp/terraform-provider-azuread/internal/services/groups
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func groupResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Groups.GroupsClient

	group, status, err := client.Get(ctx, d.Id(), odata.Query{})
	if err != nil {
		if status == http.StatusNotFound {
			log.Printf("[DEBUG] Group with ID %q was not found - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return tf.ErrorDiagF(err, "Retrieving group with object ID: %q", d.Id())
	}

	tf.Set(d, "assignable_to_role", group.IsAssignableToRole)
	tf.Set(d, "behaviors", tf.FlattenStringSlicePtr(group.ResourceBehaviorOptions))
	tf.Set(d, "description", group.Description)
	tf.Set(d, "display_name", group.DisplayName)
	tf.Set(d, "mail_enabled", group.MailEnabled)
	tf.Set(d, "mail", group.Mail)
	tf.Set(d, "mail_nickname", group.MailNickname)
	tf.Set(d, "object_id", group.ID())
	tf.Set(d, "onpremises_domain_name", group.OnPremisesDomainName)
	tf.Set(d, "onpremises_netbios_name", group.OnPremisesNetBiosName)
	tf.Set(d, "onpremises_sam_account_name", group.OnPremisesSamAccountName)
	tf.Set(d, "onpremises_security_identifier", group.OnPremisesSecurityIdentifier)
	tf.Set(d, "onpremises_sync_enabled", group.OnPremisesSyncEnabled)
	tf.Set(d, "preferred_language", group.PreferredLanguage)
	tf.Set(d, "provisioning_options", tf.FlattenStringSlicePtr(group.ResourceProvisioningOptions))
	tf.Set(d, "proxy_addresses", tf.FlattenStringSlicePtr(group.ProxyAddresses))
	tf.Set(d, "security_enabled", group.SecurityEnabled)
	tf.Set(d, "theme", group.Theme)
	tf.Set(d, "types", group.GroupTypes)
	tf.Set(d, "visibility", group.Visibility)

	dynamicMembership := make([]interface{}, 0)
	if group.MembershipRule != nil {
		enabled := true
		if group.MembershipRuleProcessingState != nil && *group.MembershipRuleProcessingState == "Paused" {
			enabled = false
		}
		dynamicMembership = append(dynamicMembership, map[string]interface{}{
			"enabled": enabled,
			"rule":    group.MembershipRule,
		})
	}
	tf.Set(d, "dynamic_membership", dynamicMembership)

	if group.WritebackConfiguration != nil {
		tf.Set(d, "writeback_enabled", group.WritebackConfiguration.IsEnabled)
		tf.Set(d, "onpremises_group_type", group.WritebackConfiguration.OnPremisesGroupType)
	}

	var allowExternalSenders, autoSubscribeNewMembers, hideFromAddressLists, hideFromOutlookClients bool
	if group.GroupTypes != nil && hasGroupType(*group.GroupTypes, msgraph.GroupTypeUnified) {
		groupExtra, err := groupGetAdditional(ctx, client, d.Id())
		if err != nil {
			return tf.ErrorDiagF(err, "Could not retrieve group with object UID %q", d.Id())
		}

		if groupExtra != nil {
			if groupExtra.AllowExternalSenders != nil {
				allowExternalSenders = *groupExtra.AllowExternalSenders
			}
			if groupExtra.AutoSubscribeNewMembers != nil {
				autoSubscribeNewMembers = *groupExtra.AutoSubscribeNewMembers
			}
			if groupExtra.HideFromAddressLists != nil {
				hideFromAddressLists = *groupExtra.HideFromAddressLists
			}
			if groupExtra.HideFromOutlookClients != nil {
				hideFromOutlookClients = *groupExtra.HideFromOutlookClients
			}
		}
	}

	tf.Set(d, "auto_subscribe_new_members", autoSubscribeNewMembers)
	tf.Set(d, "external_senders_allowed", allowExternalSenders)
	tf.Set(d, "hide_from_address_lists", hideFromAddressLists)
	tf.Set(d, "hide_from_outlook_clients", hideFromOutlookClients)

	owners, _, err := client.ListOwners(ctx, *group.ID())
	if err != nil {
		return tf.ErrorDiagPathF(err, "owners", "Could not retrieve owners for group with object ID %q", d.Id())
	}
	tf.Set(d, "owners", owners)

	members, _, err := client.ListMembers(ctx, *group.ID())
	if err != nil {
		return tf.ErrorDiagPathF(err, "owners", "Could not retrieve members for group with object ID %q", d.Id())
	}
	tf.Set(d, "members", members)

	administrativeUnits, _, err := client.ListAdministrativeUnitMemberships(ctx, *group.ID())
	if err != nil {
		return tf.ErrorDiagPathF(err, "administrative_units", "Could not retrieve administrative units for group with object ID %q", d.Id())
	}

	auIdMembers := make([]string, 0)
	for _, administrativeUnit := range *administrativeUnits {
		auIdMembers = append(auIdMembers, *administrativeUnit.ID)
	}

	if len(auIdMembers) > 0 {
		tf.Set(d, "administrative_unit_ids", &auIdMembers)
	} else {
		tf.Set(d, "administrative_unit_ids", nil)
	}

	preventDuplicates := false
	if v := d.Get("prevent_duplicate_names").(bool); v {
		preventDuplicates = v
	}
	tf.Set(d, "prevent_duplicate_names", preventDuplicates)

	return nil
}
