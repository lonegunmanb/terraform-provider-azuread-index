package github.com/hashicorp/terraform-provider-azuread/internal/services/groups
import (
	"context"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	groupBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group"
	memberBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/member"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/groups/parse"
)
func groupMemberResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Groups.GroupClientBeta
	memberClient := meta.(*clients.Client).Groups.GroupMemberClientBeta

	id := beta.NewGroupIdMemberID(d.Get("group_object_id").(string), d.Get("member_object_id").(string))
	groupId := beta.NewGroupID(id.GroupId)
	resourceId := parse.NewGroupMemberID(id.GroupId, id.DirectoryObjectId)

	tf.LockByName(groupResourceName, id.GroupId)
	defer tf.UnlockByName(groupResourceName, id.GroupId)

	if resp, err := client.GetGroup(ctx, groupId, groupBeta.DefaultGetGroupOperationOptions()); err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return tf.ErrorDiagPathF(nil, "object_id", "%s was not found", groupId)
		}
		return tf.ErrorDiagPathF(err, "object_id", "Retrieving %s", groupId)
	}

	resp, err := memberClient.ListMembers(ctx, groupId, memberBeta.DefaultListMembersOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Listing existing members for %s", groupId)
	}

	existingMembers := resp.Model
	if existingMembers != nil {
		for _, v := range *existingMembers {
			if strings.EqualFold(pointer.From(v.DirectoryObject().Id), id.DirectoryObjectId) {
				return tf.ImportAsExistsDiag("azuread_group_member", resourceId.String())
			}
		}
	}

	memberId := beta.NewDirectoryObjectID(id.DirectoryObjectId)

	memberRef := beta.ReferenceCreate{
		ODataId: pointer.To(client.Client.BaseUri + memberId.ID()),
	}

	if _, err = memberClient.AddMemberRef(ctx, groupId, memberRef, memberBeta.DefaultAddMemberRefOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Adding %s", id)
	}

	d.SetId(resourceId.String())

	return groupMemberResourceRead(ctx, d, meta)
}
