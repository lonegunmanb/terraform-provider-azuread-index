package github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func customDirectoryRoleResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).DirectoryRoles.RoleDefinitionsClient
	roleId := d.Id()

	displayName := d.Get("display_name").(string)

	properties := msgraph.UnifiedRoleDefinition{
		DirectoryObject: msgraph.DirectoryObject{
			Id: &roleId,
		},
		Description:     tf.NullableString(d.Get("description").(string)),
		DisplayName:     pointer.To(displayName),
		IsEnabled:       pointer.To(d.Get("enabled").(bool)),
		RolePermissions: expandCustomRolePermissions(d.Get("permissions").(*pluginsdk.Set).List()),
		TemplateId:      pointer.To(d.Get("template_id").(string)),
		Version:         pointer.To(d.Get("version").(string)),
	}

	_, err := client.Update(ctx, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Updating custom directory role %q", displayName)
	}

	return customDirectoryRoleResourceRead(ctx, d, meta)
}
