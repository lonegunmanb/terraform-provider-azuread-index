package github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func directoryRoleAssignmentResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).DirectoryRoles.RoleAssignmentsClient

	id := d.Id()
	assignment, status, err := client.Get(ctx, id, odata.Query{})
	if err != nil {
		if status == http.StatusNotFound {
			log.Printf("[DEBUG] Assignment with ID %q was not found - removing from state", id)
			d.SetId("")
			return nil
		}
		return tf.ErrorDiagF(err, "Retrieving role assignment %q", id)
	}

	tf.Set(d, "app_scope_id", assignment.AppScopeId)
	tf.Set(d, "app_scope_object_id", assignment.AppScopeId)
	tf.Set(d, "directory_scope_id", assignment.DirectoryScopeId)
	tf.Set(d, "directory_scope_object_id", assignment.DirectoryScopeId)
	tf.Set(d, "principal_object_id", assignment.PrincipalId)
	tf.Set(d, "role_id", assignment.RoleDefinitionId)

	return nil
}
