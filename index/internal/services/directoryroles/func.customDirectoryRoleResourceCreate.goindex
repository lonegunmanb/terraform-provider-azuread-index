package github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/rolemanagement/stable/directoryroledefinition"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles/migrations"
)
func customDirectoryRoleResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).DirectoryRoles.DirectoryRoleDefinitionClient

	displayName := d.Get("display_name").(string)

	properties := stable.UnifiedRoleDefinition{
		Description:     nullable.NoZero(d.Get("description").(string)),
		DisplayName:     nullable.Value(displayName),
		IsEnabled:       nullable.Value(d.Get("enabled").(bool)),
		RolePermissions: expandCustomRolePermissions(d.Get("permissions").(*pluginsdk.Set).List()),
		TemplateId:      nullable.Value(d.Get("template_id").(string)),
		Version:         nullable.Value(d.Get("version").(string)),
	}

	resp, err := client.CreateDirectoryRoleDefinition(ctx, properties, directoryroledefinition.DefaultCreateDirectoryRoleDefinitionOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Creating custom directory role %q", displayName)
	}

	role := resp.Model
	if role == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Creating custom directory role %q", displayName)
	}

	if role.Id == nil || *role.Id == "" {
		return tf.ErrorDiagF(errors.New("API returned custom directory role with nil ID"), "Bad API Response")
	}

	id := stable.NewRoleManagementDirectoryRoleDefinitionID(*role.Id)
	d.SetId(id.ID())

	return customDirectoryRoleResourceRead(ctx, d, meta)
}
