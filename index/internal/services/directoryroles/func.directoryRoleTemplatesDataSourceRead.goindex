package github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles
import (
	"context"
	"crypto/sha1"
	"encoding/base64"
	"errors"
	"strings"
	"time"

	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
)
func directoryRoleTemplatesDataSourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).DirectoryRoles.DirectoryRoleTemplatesClient

	directoryRoleTemplates, _, err := client.List(ctx)
	if err != nil {
		return tf.ErrorDiagF(err, "Could not retrieve role templates")
	}
	if directoryRoleTemplates == nil {
		return tf.ErrorDiagF(errors.New("API error: nil directoryRoleTemplates were returned"), "Retrieving all directory role templates")
	}

	objectIds := make([]string, 0)
	templateList := make([]map[string]interface{}, 0)

	for _, r := range *directoryRoleTemplates {
		// Skip the implicit "Users" role as it's non-assignable
		if r.ID == nil || r.DisplayName == nil || *r.DisplayName == "User" {
			continue
		}

		objectIds = append(objectIds, *r.ID)

		template := make(map[string]interface{})
		template["description"] = r.Description
		template["display_name"] = r.DisplayName
		template["object_id"] = r.ID
		templateList = append(templateList, template)
	}

	// Generate a unique ID based on result
	h := sha1.New()
	if _, err := h.Write([]byte(strings.Join(objectIds, "/"))); err != nil {
		return tf.ErrorDiagF(err, "Unable to compute hash for Object IDs")
	}

	d.SetId("templates#" + base64.URLEncoding.EncodeToString(h.Sum(nil)))

	tf.Set(d, "role_templates", templateList)
	tf.Set(d, "object_ids", objectIds)

	return nil
}
