package github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles
import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/directoryroles/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/suppress"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func (r DirectoryRoleResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.DirectoryRoles.DirectoryRolesClient
			client.BaseClient.DisableRetries = true
			defer func() { client.BaseClient.DisableRetries = false }()

			id := parse.NewDirectoryRoleID(metadata.ResourceData.Id())

			var state DirectoryRoleModel
			if err := metadata.Decode(&state); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			directoryRole, status, err := client.Get(ctx, id.ID())
			if err != nil {
				if status == http.StatusNotFound {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}
			if directoryRole == nil {
				return fmt.Errorf("retrieving %s: API error, result was nil", id)
			}

			state.Description = pointer.From(directoryRole.Description)
			state.DisplayName = pointer.From(directoryRole.DisplayName)
			state.ObjectId = pointer.From(directoryRole.ID())
			state.TemplateId = pointer.From(directoryRole.RoleTemplateId)

			return metadata.Encode(&state)
		},
	}
}
