package github.com/hashicorp/terraform-provider-azuread/internal/services/users
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	userBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/manager"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/users/migrations"
)
func userResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Users.UserClient
	clientBeta := meta.(*clients.Client).Users.UserClientBeta
	managerClient := meta.(*clients.Client).Users.ManagerClient

	id, err := stable.ParseUserID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing ID")
	}

	resp, err := client.GetUser(ctx, *id, user.DefaultGetUserOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", id)
			d.SetId("")
			return nil
		}
		return tf.ErrorDiagF(err, "Retrieving %s", id)
	}

	u := resp.Model
	if u == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", id)
	}

	tf.Set(d, "about_me", u.AboutMe.GetOrZero())
	tf.Set(d, "business_phones", tf.FlattenStringSlicePtr(u.BusinessPhones))
	tf.Set(d, "creation_type", u.CreationType.GetOrZero())
	tf.Set(d, "display_name", u.DisplayName.GetOrZero())
	tf.Set(d, "given_name", u.GivenName.GetOrZero())
	tf.Set(d, "im_addresses", tf.FlattenStringSlicePtr(u.ImAddresses))
	tf.Set(d, "job_title", u.JobTitle.GetOrZero())
	tf.Set(d, "mail", u.Mail.GetOrZero())
	tf.Set(d, "mobile_phone", u.MobilePhone.GetOrZero())
	tf.Set(d, "object_id", pointer.From(u.Id))
	tf.Set(d, "office_location", u.OfficeLocation.GetOrZero())
	tf.Set(d, "onpremises_distinguished_name", u.OnPremisesDistinguishedName.GetOrZero())
	tf.Set(d, "onpremises_domain_name", u.OnPremisesDomainName.GetOrZero())
	tf.Set(d, "onpremises_sam_account_name", u.OnPremisesSamAccountName.GetOrZero())
	tf.Set(d, "onpremises_security_identifier", u.OnPremisesSecurityIdentifier.GetOrZero())
	tf.Set(d, "onpremises_sync_enabled", u.OnPremisesSyncEnabled.GetOrZero())
	tf.Set(d, "onpremises_user_principal_name", u.OnPremisesUserPrincipalName.GetOrZero())
	tf.Set(d, "preferred_language", u.PreferredLanguage.GetOrZero())
	tf.Set(d, "proxy_addresses", tf.FlattenStringSlicePtr(u.ProxyAddresses))
	tf.Set(d, "surname", u.Surname.GetOrZero())
	tf.Set(d, "user_principal_name", u.UserPrincipalName.GetOrZero())
	tf.Set(d, "user_type", u.UserType.GetOrZero())

	// Retrieve additional fields
	optionsExtra := user.GetUserOperationOptions{
		Select: &[]string{
			"accountEnabled",
			"ageGroup",
			"city",
			"companyName",
			"consentProvidedForMinor",
			"country",
			"department",
			"employeeId",
			"employeeOrgData",
			"employeeType",
			"faxNumber",
			"mailNickname",
			"onPremisesImmutableId",
			"otherMails",
			"passwordPolicies",
			"postalCode",
			"state",
			"streetAddress",
			"usageLocation",
		},
	}
	respExtra, err := client.GetUser(ctx, *id, optionsExtra)
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving additional fields for %s", id)
	}

	uExtra := respExtra.Model
	if uExtra == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving additional fields for %s", id)
	}

	tf.Set(d, "account_enabled", uExtra.AccountEnabled.GetOrZero())
	tf.Set(d, "age_group", uExtra.AgeGroup.GetOrZero())
	tf.Set(d, "city", uExtra.City.GetOrZero())
	tf.Set(d, "company_name", uExtra.CompanyName.GetOrZero())
	tf.Set(d, "consent_provided_for_minor", uExtra.ConsentProvidedForMinor.GetOrZero())
	tf.Set(d, "country", uExtra.Country.GetOrZero())
	tf.Set(d, "department", uExtra.Department.GetOrZero())
	tf.Set(d, "employee_id", uExtra.EmployeeId.GetOrZero())
	tf.Set(d, "employee_type", uExtra.EmployeeType.GetOrZero())
	tf.Set(d, "external_user_state", uExtra.ExternalUserState.GetOrZero())
	tf.Set(d, "fax_number", uExtra.FaxNumber.GetOrZero())
	tf.Set(d, "mail_nickname", uExtra.MailNickname.GetOrZero())
	tf.Set(d, "onpremises_immutable_id", uExtra.OnPremisesImmutableId.GetOrZero())
	tf.Set(d, "other_mails", tf.FlattenStringSlicePtr(uExtra.OtherMails))
	tf.Set(d, "postal_code", uExtra.PostalCode.GetOrZero())
	tf.Set(d, "state", uExtra.State.GetOrZero())
	tf.Set(d, "street_address", uExtra.StreetAddress.GetOrZero())
	tf.Set(d, "usage_location", uExtra.UsageLocation.GetOrZero())

	if orgData := uExtra.EmployeeOrgData; orgData != nil {
		tf.Set(d, "cost_center", orgData.CostCenter.GetOrZero())
		tf.Set(d, "division", orgData.Division.GetOrZero())
	}

	disableStrongPassword := false
	disablePasswordExpiration := false

	if passwordPolicies := uExtra.PasswordPolicies; passwordPolicies != nil {
		policies := strings.Split(passwordPolicies.GetOrZero(), ",")
		for _, p := range policies {
			if strings.EqualFold(strings.TrimSpace(p), "DisableStrongPassword") {
				disableStrongPassword = true
			}
			if strings.EqualFold(strings.TrimSpace(p), "DisablePasswordExpiration") {
				disablePasswordExpiration = true
			}
		}
	}

	tf.Set(d, "disable_strong_password", disableStrongPassword)
	tf.Set(d, "disable_password_expiration", disablePasswordExpiration)

	// Retrieve the `accountEnabled` and `showInAddressList` fields using the beta API, see https://developer.microsoft.com/en-us/graph/known-issues/?search=14972
	optionsBeta := userBeta.GetUserOperationOptions{
		Select: &[]string{"showInAddressList"},
	}
	respBeta, err := clientBeta.GetUser(ctx, beta.UserId(*id), optionsBeta)
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving additional fields for %s", id)
	}

	uBeta := respBeta.Model
	if uBeta == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving additional fields for %s", id)
	}

	tf.Set(d, "show_in_address_list", uBeta.ShowInAddressList.GetOrZero())

	// Retrieve the user's manager
	managerId := ""
	managerResp, err := managerClient.GetManager(ctx, *id, manager.DefaultGetManagerOperationOptions())
	if !response.WasNotFound(managerResp.HttpResponse) {
		if err != nil {
			return tf.ErrorDiagF(err, "Could not retrieve manager for %s", id)
		}
		if managerResp.Model != nil {
			managerId = pointer.From(managerResp.Model.DirectoryObject().Id)
		}
	}

	tf.Set(d, "manager_id", managerId)

	return nil
}
