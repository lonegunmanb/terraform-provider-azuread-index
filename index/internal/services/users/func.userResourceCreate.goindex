package github.com/hashicorp/terraform-provider-azuread/internal/services/users
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	userBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/manager"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/users/migrations"
)
func userResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Users.UserClient
	clientBeta := meta.(*clients.Client).Users.UserClientBeta
	managerClient := meta.(*clients.Client).Users.ManagerClient

	password := d.Get("password").(string)
	if password == "" {
		return tf.ErrorDiagPathF(errors.New("`password` is required when creating a new user"), "password", "Could not create user")
	}

	upn := d.Get("user_principal_name").(string)
	mailNickName := d.Get("mail_nickname").(string)

	// Default mail nickname to the first part of the UPN (matches the portal)
	if mailNickName == "" {
		mailNickName = strings.Split(upn, "@")[0]
	}

	var passwordPolicies string
	disableStrongPassword := d.Get("disable_strong_password").(bool)
	disablePasswordExpiration := d.Get("disable_password_expiration").(bool)

	switch {
	case disableStrongPassword && (!disablePasswordExpiration):
		passwordPolicies = "DisableStrongPassword"
	case (!disableStrongPassword) && disablePasswordExpiration:
		passwordPolicies = "DisablePasswordExpiration"
	case disableStrongPassword && disablePasswordExpiration:
		passwordPolicies = "DisablePasswordExpiration, DisableStrongPassword"
	}

	properties := stable.User{
		AccountEnabled:          nullable.Value(d.Get("account_enabled").(bool)),
		AgeGroup:                nullable.NoZero(d.Get("age_group").(string)),
		City:                    nullable.NoZero(d.Get("city").(string)),
		ConsentProvidedForMinor: nullable.NoZero(d.Get("consent_provided_for_minor").(string)),
		CompanyName:             nullable.NoZero(d.Get("company_name").(string)),
		Country:                 nullable.NoZero(d.Get("country").(string)),
		Department:              nullable.NoZero(d.Get("department").(string)),
		DisplayName:             nullable.NoZero(d.Get("display_name").(string)),
		EmployeeId:              nullable.NoZero(d.Get("employee_id").(string)),
		EmployeeOrgData: &stable.EmployeeOrgData{
			CostCenter: nullable.NoZero(d.Get("cost_center").(string)),
			Division:   nullable.NoZero(d.Get("division").(string)),
		},
		EmployeeType:      nullable.NoZero(d.Get("employee_type").(string)),
		FaxNumber:         nullable.NoZero(d.Get("fax_number").(string)),
		GivenName:         nullable.NoZero(d.Get("given_name").(string)),
		JobTitle:          nullable.NoZero(d.Get("job_title").(string)),
		Mail:              nullable.NoZero(d.Get("mail").(string)),
		MailNickname:      nullable.NoZero(mailNickName),
		MobilePhone:       nullable.NoZero(d.Get("mobile_phone").(string)),
		OfficeLocation:    nullable.NoZero(d.Get("office_location").(string)),
		OtherMails:        tf.ExpandStringSlicePtr(d.Get("other_mails").(*pluginsdk.Set).List()),
		PasswordPolicies:  nullable.NoZero(passwordPolicies),
		PostalCode:        nullable.NoZero(d.Get("postal_code").(string)),
		PreferredLanguage: nullable.NoZero(d.Get("preferred_language").(string)),
		State:             nullable.NoZero(d.Get("state").(string)),
		StreetAddress:     nullable.NoZero(d.Get("street_address").(string)),
		Surname:           nullable.NoZero(d.Get("surname").(string)),
		UsageLocation:     nullable.NoZero(d.Get("usage_location").(string)),
		UserPrincipalName: nullable.NoZero(upn),

		PasswordProfile: &stable.PasswordProfile{
			ForceChangePasswordNextSignIn: nullable.Value(d.Get("force_password_change").(bool)),
			Password:                      nullable.NoZero(password),
		},
	}

	if v, ok := d.GetOk("business_phones"); ok {
		properties.BusinessPhones = tf.ExpandStringSlicePtr(v.([]interface{}))
	}

	if v, ok := d.GetOk("onpremises_immutable_id"); ok {
		properties.OnPremisesImmutableId = nullable.NoZero(v.(string))
	}

	options := user.CreateUserOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			if response.WasBadRequest(resp) && o != nil && o.Error != nil {
				return o.Error.Match("One or more property values specified are invalid"), nil
			}
			return false, nil
		},
	}

	resp, err := client.CreateUser(ctx, properties, options)
	if err != nil {
		return tf.ErrorDiagF(err, "Creating user %q", upn)
	}

	u := resp.Model
	if u.Id == nil || *u.Id == "" {
		return tf.ErrorDiagF(errors.New("API returned group with nil object ID"), "Bad API Response")
	}

	id := stable.NewUserID(*u.Id)
	d.SetId(id.ID())

	// Set the `showInAddressList` field using the beta API, see https://developer.microsoft.com/en-us/graph/known-issues/?search=14972
	updateProperties := beta.User{
		ShowInAddressList: nullable.Value(d.Get("show_in_address_list").(bool)),
	}
	updateOptions := userBeta.UpdateUserOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			return response.WasNotFound(resp), nil
		},
	}
	if _, err = clientBeta.UpdateUser(ctx, beta.UserId(id), updateProperties, updateOptions); err != nil {
		return tf.ErrorDiagF(err, "Setting `showInAddressList` for %s", id)
	}

	if v := d.Get("manager_id").(string); v != "" {
		managerRef := stable.ReferenceUpdate{
			ODataId: pointer.To(client.Client.BaseUri + stable.NewDirectoryObjectID(v).ID()),
		}
		if _, err = managerClient.SetManagerRef(ctx, id, managerRef, manager.DefaultSetManagerRefOperationOptions()); err != nil {
			return tf.ErrorDiagPathF(err, "manager_id", "Could not assign manager for %s", id)
		}
	}

	// Now ensure we can retrieve the user consistently
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetUser(ctx, id, user.DefaultGetUserOperationOptions())
		if err != nil {
			if response.WasNotFound(resp.HttpResponse) {
				return pointer.To(false), nil
			}
			return pointer.To(false), err
		}
		return pointer.To(resp.Model != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for creation of %s", id)
	}

	return userResourceRead(ctx, d, meta)
}
