package github.com/hashicorp/terraform-provider-azuread/internal/services/users
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	userBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/manager"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/users/migrations"
)
func userResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Users.UserClient
	clientBeta := meta.(*clients.Client).Users.UserClientBeta
	managerClient := meta.(*clients.Client).Users.ManagerClient

	id, err := stable.ParseUserID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing ID")
	}

	var passwordPolicies []string
	if d.Get("disable_strong_password").(bool) {
		passwordPolicies = append(passwordPolicies, "DisableStrongPassword")
	}
	if d.Get("disable_password_expiration").(bool) {
		passwordPolicies = append(passwordPolicies, "DisablePasswordExpiration")
	}

	properties := stable.User{
		AccountEnabled:          nullable.Value(d.Get("account_enabled").(bool)),
		AgeGroup:                nullable.NoZero(d.Get("age_group").(string)),
		City:                    nullable.NoZero(d.Get("city").(string)),
		CompanyName:             nullable.NoZero(d.Get("company_name").(string)),
		ConsentProvidedForMinor: nullable.NoZero(d.Get("consent_provided_for_minor").(string)),
		Country:                 nullable.NoZero(d.Get("country").(string)),
		Department:              nullable.NoZero(d.Get("department").(string)),
		DisplayName:             nullable.Value(d.Get("display_name").(string)),
		EmployeeId:              nullable.NoZero(d.Get("employee_id").(string)),
		EmployeeOrgData: &stable.EmployeeOrgData{
			CostCenter: nullable.NoZero(d.Get("cost_center").(string)),
			Division:   nullable.NoZero(d.Get("division").(string)),
		},
		EmployeeType:      nullable.NoZero(d.Get("employee_type").(string)),
		FaxNumber:         nullable.NoZero(d.Get("fax_number").(string)),
		GivenName:         nullable.NoZero(d.Get("given_name").(string)),
		JobTitle:          nullable.NoZero(d.Get("job_title").(string)),
		MailNickname:      nullable.NoZero(d.Get("mail_nickname").(string)),
		MobilePhone:       nullable.NoZero(d.Get("mobile_phone").(string)),
		OfficeLocation:    nullable.NoZero(d.Get("office_location").(string)),
		OtherMails:        tf.ExpandStringSlicePtr(d.Get("other_mails").(*pluginsdk.Set).List()),
		PasswordPolicies:  nullable.NoZero(strings.Join(passwordPolicies, ", ")),
		PostalCode:        nullable.NoZero(d.Get("postal_code").(string)),
		PreferredLanguage: nullable.NoZero(d.Get("preferred_language").(string)),
		State:             nullable.NoZero(d.Get("state").(string)),
		StreetAddress:     nullable.NoZero(d.Get("street_address").(string)),
		Surname:           nullable.NoZero(d.Get("surname").(string)),
		UsageLocation:     nullable.NoZero(d.Get("usage_location").(string)),
		UserPrincipalName: nullable.NoZero(d.Get("user_principal_name").(string)),
	}

	if password := d.Get("password").(string); d.HasChange("password") && password != "" {
		properties.PasswordProfile = &stable.PasswordProfile{
			ForceChangePasswordNextSignIn: nullable.Value(d.Get("force_password_change").(bool)),
			Password:                      nullable.NoZero(password),
		}
	}

	if d.HasChange("business_phones") {
		properties.BusinessPhones = tf.ExpandStringSlicePtr(d.Get("business_phones").([]interface{}))
	}

	if d.HasChange("mail") {
		if mail := d.Get("mail").(string); mail != "" {
			properties.Mail = nullable.NoZero(mail)
		}
	}

	if d.HasChange("onpremises_immutable_id") {
		properties.OnPremisesImmutableId = nullable.NoZero(d.Get("onpremises_immutable_id").(string))
	}

	if d.HasChange("show_in_address_list") {
		properties.ShowInAddressList = nullable.NoZero(d.Get("show_in_address_list").(bool))
	}

	if d.HasChange("employee_hire_date") {
		_, err := time.Parse(time.RFC3339, d.Get("employee_hire_date").(string))
		if err != nil {
			tf.ErrorDiagF(err, "Unable to parse the provided employee_hire_date %q: %+v", d.Get("employee_hire_date"), err)
		}
		properties.EmployeeHireDate = nullable.NoZero(d.Get("employee_hire_date").(string))
	}

	if _, err = client.UpdateUser(ctx, *id, properties, user.DefaultUpdateUserOperationOptions()); err != nil {
		// Flag the state as 'partial' to avoid setting `password` from the current config. Since the config is the
		// only source for this property, if the update fails due to a bad password, the current password will be forgotten
		// and Terraform will not offer a diff in the next plan.
		d.Partial(true) //lintignore:R007

		return tf.ErrorDiagF(err, "Could not update %s", id)
	}

	if d.HasChange("show_in_address_list") {
		// Set the `showInAddressList` field using the beta API, see https://developer.microsoft.com/en-us/graph/known-issues/?search=14972
		updateProperties := beta.User{
			ShowInAddressList: nullable.Value(d.Get("show_in_address_list").(bool)),
		}
		if _, err = clientBeta.UpdateUser(ctx, beta.UserId(*id), updateProperties, userBeta.DefaultUpdateUserOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Setting `showInAddressList` for %s", id)
		}
	}

	if d.HasChange("manager_id") {
		if managerId := d.Get("manager_id").(string); managerId != "" {
			managerRef := stable.ReferenceUpdate{
				ODataId: pointer.To(client.Client.BaseUri + stable.NewDirectoryObjectID(d.Get("manager_id").(string)).ID()),
			}

			if _, err = managerClient.SetManagerRef(ctx, *id, managerRef, manager.DefaultSetManagerRefOperationOptions()); err != nil {
				return tf.ErrorDiagPathF(err, "manager_id", "Could not assign manager for %s", id)
			}
		} else {
			if _, err = managerClient.RemoveManagerRef(ctx, *id, manager.DefaultRemoveManagerRefOperationOptions()); err != nil {
				return tf.ErrorDiagPathF(err, "manager_id", "Could not remove manager for %s", id)
			}
		}
	}

	return userResourceRead(ctx, d, meta)
}
