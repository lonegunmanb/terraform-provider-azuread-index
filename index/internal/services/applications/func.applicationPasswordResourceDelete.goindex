package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/migrations"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
)
func applicationPasswordResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics { //nolint
	client := meta.(*clients.Client).Applications.ApplicationClient

	id, err := parse.PasswordID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing password credential with ID %q", d.Id())
	}

	applicationId := stable.NewApplicationID(id.ObjectId)

	tf.LockByName(applicationResourceName, id.ObjectId)
	defer tf.UnlockByName(applicationResourceName, id.ObjectId)

	request := application.RemovePasswordRequest{
		KeyId: pointer.To(id.KeyId),
	}
	if _, err = client.RemovePassword(ctx, applicationId, request, application.DefaultRemovePasswordOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Removing password credential %q from %s", id.KeyId, applicationId)
	}

	// Wait for application password to be deleted
	if err := consistency.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetApplication(ctx, applicationId, application.DefaultGetApplicationOperationOptions())
		if err != nil {
			return nil, err
		}

		app := resp.Model
		if app == nil {
			return nil, errors.New("model was nil")
		}

		return pointer.To(credentials.GetPasswordCredential(app.PasswordCredentials, id.KeyId) != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for deletion of password credential %q from %s", id.KeyId, applicationId)
	}

	return nil
}
