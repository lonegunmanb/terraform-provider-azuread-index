package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/manicminer/hamilton/msgraph"
)
func (r ApplicationOptionalClaimsResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationsClient
			rd := metadata.ResourceData

			id, err := parse.ParseOptionalClaimsID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model ApplicationOptionalClaimsModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			applicationId := parse.NewApplicationID(id.ApplicationId)
			result, _, err := client.Get(ctx, applicationId.ApplicationId, odata.Query{})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}
			if result == nil || result.OptionalClaims == nil {
				return fmt.Errorf("retrieving %s: optionalClaims was nil", applicationId)
			}

			// Start with the existing claims, as they must be updated together, then update each type in turn as needed
			newOptionalClaims := *result.OptionalClaims

			if rd.HasChange("access_token") {
				newAccessTokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.AccessTokens {
					newAccessTokenClaims = append(newAccessTokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				newOptionalClaims.AccessToken = &newAccessTokenClaims
			}

			if rd.HasChange("id_token") {
				newIdTokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.IdTokens {
					newIdTokenClaims = append(newIdTokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				newOptionalClaims.IdToken = &newIdTokenClaims
			}

			if rd.HasChange("saml2_token") {
				newSaml2TokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.Saml2Tokens {
					newSaml2TokenClaims = append(newSaml2TokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				newOptionalClaims.Saml2Token = &newSaml2TokenClaims
			}

			properties := msgraph.Application{
				DirectoryObject: msgraph.DirectoryObject{
					Id: &applicationId.ApplicationId,
				},
				OptionalClaims: &newOptionalClaims,
			}

			_, err = client.Update(ctx, properties)
			if err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}

			return nil
		},
	}
}
