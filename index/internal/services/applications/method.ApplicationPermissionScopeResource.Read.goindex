package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	applicationsValidate "github.com/hashicorp/terraform-provider-azuread/internal/services/applications/validate"
)
func (r ApplicationPermissionScopeResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			id, err := parse.ParsePermissionScopeID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			applicationId := stable.NewApplicationID(id.ApplicationId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			resp, err := client.GetApplication(ctx, applicationId, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			app := resp.Model
			if app == nil {
				return fmt.Errorf("retrieving %s: model was nil", id)
			}
			if app.Api == nil || app.Api.OAuth2PermissionScopes == nil {
				return metadata.MarkAsGone(id)
			}

			// Identify the scope by ID
			var scope *stable.PermissionScope
			for _, existingScope := range *app.Api.OAuth2PermissionScopes {
				if strings.EqualFold(*existingScope.Id, id.ScopeID) {
					scope = &existingScope
					break
				}
			}

			if scope == nil {
				return metadata.MarkAsGone(id)
			}

			state := ApplicationPermissionScopeModel{
				ApplicationId:           applicationId.ID(),
				ScopeId:                 id.ScopeID,
				AdminConsentDescription: scope.AdminConsentDescription.GetOrZero(),
				AdminConsentDisplayName: scope.AdminConsentDisplayName.GetOrZero(),
				Type:                    scope.Type.GetOrZero(),
				UserConsentDescription:  scope.UserConsentDescription.GetOrZero(),
				UserConsentDisplayName:  scope.UserConsentDisplayName.GetOrZero(),
				Value:                   scope.Value.GetOrZero(),
			}

			return metadata.Encode(&state)
		},
	}
}
