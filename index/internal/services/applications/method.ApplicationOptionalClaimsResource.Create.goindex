package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/manicminer/hamilton/msgraph"
)
func (r ApplicationOptionalClaimsResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationsClient
			client.BaseClient.DisableRetries = true
			defer func() { client.BaseClient.DisableRetries = false }()

			var model ApplicationOptionalClaimsModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			applicationId, err := parse.ParseApplicationID(model.ApplicationId)
			if err != nil {
				return err
			}

			id := parse.NewOptionalClaimsID(applicationId.ApplicationId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			result, _, err := client.Get(ctx, applicationId.ApplicationId, odata.Query{})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}
			if result == nil {
				return fmt.Errorf("retrieving %s: result was nil", applicationId)
			}

			// Check for existing optional claims
			if claims := result.OptionalClaims; claims != nil {
				if claims.AccessToken != nil && len(*claims.AccessToken) > 0 {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
				if claims.IdToken != nil && len(*claims.IdToken) > 0 {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
				if claims.Saml2Token != nil && len(*claims.Saml2Token) > 0 {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
			}

			// Assemble the optional claims
			optionalClaims := msgraph.OptionalClaims{}

			if len(model.AccessTokens) > 0 {
				accessTokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.AccessTokens {
					accessTokenClaims = append(accessTokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				optionalClaims.AccessToken = &accessTokenClaims
			}

			if len(model.IdTokens) > 0 {
				idTokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.IdTokens {
					idTokenClaims = append(idTokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				optionalClaims.IdToken = &idTokenClaims
			}

			if len(model.Saml2Tokens) > 0 {
				saml2TokenClaims := make([]msgraph.OptionalClaim, 0)
				for _, claim := range model.Saml2Tokens {
					saml2TokenClaims = append(saml2TokenClaims, msgraph.OptionalClaim{
						Name:                 pointer.To(claim.Name),
						Source:               pointer.To(claim.Source),
						Essential:            pointer.To(claim.Essential),
						AdditionalProperties: pointer.To(claim.AdditionalProperties),
					})
				}
				optionalClaims.Saml2Token = &saml2TokenClaims
			}

			properties := msgraph.Application{
				DirectoryObject: msgraph.DirectoryObject{
					Id: &id.ApplicationId,
				},
				OptionalClaims: &optionalClaims,
			}

			if _, err = client.Update(ctx, properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
