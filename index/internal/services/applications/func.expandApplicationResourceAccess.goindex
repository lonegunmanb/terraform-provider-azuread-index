package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
)
func expandApplicationResourceAccess(in []interface{}) *[]stable.ResourceAccess {
	result := make([]stable.ResourceAccess, 0)

	for _, resourceAccessRaw := range in {
		if resourceAccessRaw == nil {
			continue
		}
		resourceAccess := resourceAccessRaw.(map[string]interface{})

		result = append(result, stable.ResourceAccess{
			Id:   pointer.To(resourceAccess["id"].(string)),
			Type: nullable.Value(resourceAccess["type"].(string)),
		})
	}

	return &result
}
