package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	applicationBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/logo"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/owner"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/migrations"
	applicationsValidate "github.com/hashicorp/terraform-provider-azuread/internal/services/applications/validate"
)
func applicationResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Applications.ApplicationClient
	clientBeta := meta.(*clients.Client).Applications.ApplicationClientBeta
	ownerClient := meta.(*clients.Client).Applications.ApplicationOwnerClient

	id, err := stable.ParseApplicationID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing ID")
	}

	resp, err := client.GetApplication(ctx, *id, application.DefaultGetApplicationOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state", id)
			d.SetId("")
			return nil
		}

		return tf.ErrorDiagPathF(err, "id", "Retrieving %s", id)
	}

	app := resp.Model
	if app == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "retrieving %s: model was nil", id)
	}

	tf.Set(d, "api", flattenApplicationApi(app.Api, false))
	tf.Set(d, "app_role", applications.FlattenAppRoles(app.AppRoles))
	tf.Set(d, "app_role_ids", applications.FlattenAppRoleIDs(app.AppRoles))
	tf.Set(d, "client_id", app.AppId.GetOrZero())
	tf.Set(d, "description", app.Description.GetOrZero())
	tf.Set(d, "device_only_auth_enabled", app.IsDeviceOnlyAuthSupported.GetOrZero())
	tf.Set(d, "disabled_by_microsoft", fmt.Sprintf("%v", app.DisabledByMicrosoftStatus.GetOrZero()))
	tf.Set(d, "display_name", app.DisplayName.GetOrZero())
	tf.Set(d, "fallback_public_client_enabled", app.IsFallbackPublicClient.GetOrZero())
	tf.Set(d, "feature_tags", applications.FlattenFeatures(app.Tags, false))
	tf.Set(d, "group_membership_claims", flattenApplicationGroupMembershipClaims(app.GroupMembershipClaims))
	tf.Set(d, "identifier_uris", tf.FlattenStringSlicePtr(app.IdentifierUris))
	tf.Set(d, "notes", app.Notes.GetOrZero())
	tf.Set(d, "object_id", app.Id)
	tf.Set(d, "optional_claims", flattenApplicationOptionalClaims(app.OptionalClaims))
	tf.Set(d, "public_client", flattenApplicationPublicClient(app.PublicClient))
	tf.Set(d, "publisher_domain", app.PublisherDomain.GetOrZero())
	tf.Set(d, "required_resource_access", flattenApplicationRequiredResourceAccess(app.RequiredResourceAccess))
	tf.Set(d, "service_management_reference", app.ServiceManagementReference.GetOrZero())
	tf.Set(d, "sign_in_audience", app.SignInAudience.GetOrZero())
	tf.Set(d, "single_page_application", flattenApplicationSpa(app.Spa))
	tf.Set(d, "tags", tf.FlattenStringSlicePtr(app.Tags))
	tf.Set(d, "template_id", app.ApplicationTemplateId.GetOrZero())
	tf.Set(d, "web", flattenApplicationWeb(app.Web))

	if app.Api != nil {
		tf.Set(d, "oauth2_permission_scope_ids", applications.FlattenOAuth2PermissionScopeIDs(app.Api.OAuth2PermissionScopes))
	}

	if app.Info != nil {
		tf.Set(d, "logo_url", app.Info.LogoUrl.GetOrZero())
		tf.Set(d, "marketing_url", app.Info.MarketingUrl.GetOrZero())
		tf.Set(d, "privacy_statement_url", app.Info.PrivacyStatementUrl.GetOrZero())
		tf.Set(d, "support_url", app.Info.SupportUrl.GetOrZero())
		tf.Set(d, "terms_of_service_url", app.Info.TermsOfServiceUrl.GetOrZero())
	}

	if app.PasswordCredentials != nil {
		currentPassword := d.Get("password").(*pluginsdk.Set).List()
		passwordToSave := make([]interface{}, 0)

		var keyIdToMatch, existingValue string

		if len(currentPassword) == 1 {
			keyIdToMatch = currentPassword[0].(map[string]interface{})["key_id"].(string)
			existingValue = currentPassword[0].(map[string]interface{})["value"].(string)

			for _, credential := range flattenApplicationPasswordCredentials(app.PasswordCredentials) {
				// Match against the known key ID, or select the first returned password if not present in state
				if credential["key_id"] == keyIdToMatch {
					// Retain the value from state, if known
					credential["value"] = existingValue
					passwordToSave = append(passwordToSave, credential)
					break
				}
			}
		}

		tf.Set(d, "password", passwordToSave)
	}

	// API bug: the v1.0 API does not return the `oauth2RequiredPostResponse` field, so retrieve it using the beta API
	// See https://github.com/microsoftgraph/msgraph-metadata/issues/273
	respBeta, err := clientBeta.GetApplication(ctx, beta.ApplicationId(*id), applicationBeta.GetApplicationOperationOptions{
		Select: pointer.To([]string{"oauth2RequirePostResponse"}),
	})
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving additional properties for %s", id)
	}

	appBeta := respBeta.Model
	if appBeta == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", id)
	}

	tf.Set(d, "oauth2_post_response_required", pointer.From(appBeta.OAuth2RequirePostResponse))

	logoImage := ""
	if v := d.Get("logo_image").(string); v != "" {
		logoImage = v
	}
	tf.Set(d, "logo_image", logoImage)

	preventDuplicates := false
	if v := d.Get("prevent_duplicate_names").(bool); v {
		preventDuplicates = v
	}
	tf.Set(d, "prevent_duplicate_names", preventDuplicates)

	owners := make([]interface{}, 0)
	if resp, err := ownerClient.ListOwners(ctx, *id, owner.DefaultListOwnersOperationOptions()); err != nil {
		return tf.ErrorDiagPathF(err, "owners", "Could not retrieve owners for %s", id)
	} else if resp.Model != nil {
		for _, obj := range *resp.Model {
			owners = append(owners, pointer.From(obj.DirectoryObject().Id))
		}
	}
	tf.Set(d, "owners", owners)

	return nil
}
