package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	applicationsValidate "github.com/hashicorp/terraform-provider-azuread/internal/services/applications/validate"
)
func (r ApplicationPermissionScopeResource) Delete() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			id, err := parse.ParsePermissionScopeID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model ApplicationPermissionScopeModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			applicationId := stable.NewApplicationID(id.ApplicationId)
			resp, err := client.GetApplication(ctx, applicationId, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}

			app := resp.Model
			if app == nil || app.Api == nil || app.Api.OAuth2PermissionScopes == nil {
				return fmt.Errorf("retrieving %s: api.oauth2PermissionScopes was nil", applicationId)
			}

			// Look for a scope to remove, matching by ID
			newScopes := make([]stable.PermissionScope, 0)
			found := false
			for _, existingScope := range *app.Api.OAuth2PermissionScopes {
				if strings.EqualFold(*existingScope.Id, id.ScopeID) {
					found = true
				} else {
					newScopes = append(newScopes, existingScope)
				}
			}
			if !found {
				return fmt.Errorf("deleting %s: could not identify existing permission scope", id)
			}

			// Disable the existing scope prior to update
			if err = applicationDisableOauth2PermissionScopes(ctx, client, applicationId, &newScopes); err != nil {
				return fmt.Errorf("disabling %s in preparation for deletion: %+v", id, err)
			}

			properties := stable.Application{
				Api: &stable.ApiApplication{
					OAuth2PermissionScopes: &newScopes,
				},
			}

			// Patch the application with the new set of scopes
			if _, err = client.UpdateApplication(ctx, applicationId, properties, application.DefaultUpdateApplicationOperationOptions()); err != nil {
				return fmt.Errorf("deleting %s: %+v", id, err)
			}

			return nil
		},
	}
}
