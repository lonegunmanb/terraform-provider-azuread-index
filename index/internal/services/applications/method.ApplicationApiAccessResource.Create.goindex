package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func (r ApplicationApiAccessResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationsClient
			client.BaseClient.DisableRetries = true
			defer func() { client.BaseClient.DisableRetries = false }()

			var model ApplicationApiAccessModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			applicationId, err := parse.ParseApplicationID(model.ApplicationId)
			if err != nil {
				return err
			}

			id := parse.NewApiAccessID(applicationId.ApplicationId, model.ApiClientId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			result, _, err := client.Get(ctx, applicationId.ApplicationId, odata.Query{})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}
			if result == nil {
				return fmt.Errorf("retrieving %s: result was nil", applicationId)
			}

			newApis := make([]msgraph.RequiredResourceAccess, 0)

			// Don't forget any existing APIs, since they must all be updated together
			if result.RequiredResourceAccess != nil {
				newApis = *result.RequiredResourceAccess
			}

			// Check for existing API
			for _, api := range newApis {
				if strings.EqualFold(*api.ResourceAppId, id.ApiClientId) {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
			}

			permissions := make([]msgraph.ResourceAccess, 0)
			for _, roleId := range model.RoleIds {
				permissions = append(permissions, msgraph.ResourceAccess{
					ID:   pointer.To(roleId),
					Type: msgraph.ResourceAccessTypeRole,
				})
			}
			for _, scopeId := range model.ScopeIds {
				permissions = append(permissions, msgraph.ResourceAccess{
					ID:   pointer.To(scopeId),
					Type: msgraph.ResourceAccessTypeScope,
				})
			}

			newApis = append(newApis, msgraph.RequiredResourceAccess{
				ResourceAppId:  &model.ApiClientId,
				ResourceAccess: &permissions,
			})

			properties := msgraph.Application{
				DirectoryObject: msgraph.DirectoryObject{
					Id: &id.ApplicationId,
				},
				RequiredResourceAccess: &newApis,
			}

			if _, err = client.Update(ctx, properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
