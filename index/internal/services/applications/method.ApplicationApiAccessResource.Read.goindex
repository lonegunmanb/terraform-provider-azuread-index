package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
)
func (r ApplicationApiAccessResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			id, err := parse.ParseApiAccessID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			applicationId := stable.NewApplicationID(id.ApplicationId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			resp, err := client.GetApplication(ctx, applicationId, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}

			app := resp.Model
			if app == nil {
				return fmt.Errorf("retrieving %s: model was nil", applicationId)
			}

			if app.RequiredResourceAccess == nil {
				return metadata.MarkAsGone(id)
			}

			// Identify the API
			var api *stable.RequiredResourceAccess
			for _, existingApi := range *app.RequiredResourceAccess {
				if strings.EqualFold(*existingApi.ResourceAppId, id.ApiClientId) {
					api = &existingApi
					break
				}
			}

			if api == nil {
				return metadata.MarkAsGone(id)
			}
			if api.ResourceAccess == nil {
				return fmt.Errorf("retrieving %s: resourceAccess was nil", id)
			}

			roleIds := make([]string, 0)
			scopeIds := make([]string, 0)
			for _, permission := range *api.ResourceAccess {
				switch permission.Type.GetOrZero() {
				case ResourceAccessTypeRole:
					roleIds = append(roleIds, pointer.From(permission.Id))
				case ResourceAccessTypeScope:
					scopeIds = append(scopeIds, pointer.From(permission.Id))
				}
			}

			state := ApplicationApiAccessModel{
				ApplicationId: applicationId.ID(),
				ApiClientId:   pointer.From(api.ResourceAppId),
				RoleIds:       roleIds,
				ScopeIds:      scopeIds,
			}

			return metadata.Encode(&state)
		},
	}
}
