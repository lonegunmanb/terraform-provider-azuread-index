package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
)
func expandApplicationOAuth2PermissionScope(in []interface{}) *[]stable.PermissionScope {
	result := make([]stable.PermissionScope, 0)

	for _, raw := range in {
		if raw == nil {
			continue
		}
		oauth2Permissions := raw.(map[string]interface{})

		result = append(result, stable.PermissionScope{
			AdminConsentDescription: nullable.Value(oauth2Permissions["admin_consent_description"].(string)),
			AdminConsentDisplayName: nullable.Value(oauth2Permissions["admin_consent_display_name"].(string)),
			Id:                      pointer.To(oauth2Permissions["id"].(string)),
			IsEnabled:               pointer.To(oauth2Permissions["enabled"].(bool)),
			Type:                    nullable.Value(oauth2Permissions["type"].(string)),
			UserConsentDescription:  nullable.Value(oauth2Permissions["user_consent_description"].(string)),
			UserConsentDisplayName:  nullable.Value(oauth2Permissions["user_consent_display_name"].(string)),
			Value:                   nullable.Value(oauth2Permissions["value"].(string)),
		})
	}

	return &result
}
