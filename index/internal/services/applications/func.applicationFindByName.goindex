package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/manicminer/hamilton/msgraph"
)
func applicationFindByName(ctx context.Context, client *msgraph.ApplicationsClient, displayName string) (*[]msgraph.Application, error) {
	query := odata.Query{
		Filter: fmt.Sprintf("displayName eq '%s'", displayName),
	}
	apps, _, err := client.List(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("unable to list Applications with filter %q: %+v", query.Filter, err)
	}

	result := make([]msgraph.Application, 0)
	if apps != nil {
		for _, app := range *apps {
			if app.DisplayName != nil && *app.DisplayName == displayName {
				result = append(result, app)
			}
		}
	}

	return &result, nil
}
