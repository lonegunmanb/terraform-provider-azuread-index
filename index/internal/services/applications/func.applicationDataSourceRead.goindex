package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	applicationBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/owner"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
)
func applicationDataSourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Applications.ApplicationClient
	clientBeta := meta.(*clients.Client).Applications.ApplicationClientBeta
	ownerClient := meta.(*clients.Client).Applications.ApplicationOwnerClient

	var app *stable.Application

	if objectId, ok := d.Get("object_id").(string); ok && objectId != "" {
		resp, err := client.GetApplication(ctx, stable.NewApplicationID(objectId), application.DefaultGetApplicationOperationOptions())
		if err != nil {
			if response.WasNotFound(resp.HttpResponse) {
				return tf.ErrorDiagPathF(nil, "object_id", "Application with object ID %q was not found", objectId)
			}

			return tf.ErrorDiagPathF(err, "object_id", "Retrieving Application with object ID %q", objectId)
		}

		app = resp.Model

	} else {
		var filter, fieldName, fieldValue string
		if clientId, ok := d.GetOk("client_id"); ok && clientId.(string) != "" {
			fieldName = "appId"
			fieldValue = clientId.(string)
			filter = fmt.Sprintf("appId eq '%s'", clientId)
		} else if displayName, ok := d.GetOk("display_name"); ok && displayName.(string) != "" {
			fieldName = "displayName"
			fieldValue = displayName.(string)
			filter = fmt.Sprintf("displayName eq '%s'", displayName)
		} else if identifierUri, ok := d.GetOk("identifier_uri"); ok && identifierUri.(string) != "" {
			fieldName = "identifierUri"
			fieldValue = identifierUri.(string)
			filter = fmt.Sprintf("identifierUris/any(uri:uri eq '%s')", identifierUri)
		} else {
			return tf.ErrorDiagF(nil, "One of `object_id`, `client_id`, `displayName`, or `identifier_uri` must be specified")
		}

		options := application.ListApplicationsOperationOptions{
			Filter: pointer.To(filter),
		}

		resp, err := client.ListApplications(ctx, options)
		if err != nil {
			return tf.ErrorDiagF(err, "Listing applications for filter %q", *options.Filter)
		}

		switch {
		case resp.Model == nil || len(*resp.Model) == 0:
			return tf.ErrorDiagF(fmt.Errorf("no applications found matching filter: %q", *options.Filter), "Application not found")
		case len(*resp.Model) > 1:
			return tf.ErrorDiagF(fmt.Errorf("dound multiple applications matching filter: %q", *options.Filter), "Multiple applications found")
		}

		app = &(*resp.Model)[0]
		switch fieldName {
		case "appId":
			if appId := app.AppId.GetOrZero(); !strings.EqualFold(appId, fieldValue) {
				return tf.ErrorDiagF(fmt.Errorf("AppID does not match for applications matching filter: %q", *options.Filter), "Bad API Response")
			}
		case "displayName":
			if displayName := app.DisplayName.GetOrZero(); !strings.EqualFold(displayName, fieldValue) {
				return tf.ErrorDiagF(fmt.Errorf("DisplayName does not match for applications matching filter: %q", *options.Filter), "Bad API Response")
			}
		}
	}

	if app == nil {
		return tf.ErrorDiagF(fmt.Errorf("app was unexpectedly nil"), "Application not found")
	}

	if app.Id == nil {
		return tf.ErrorDiagF(fmt.Errorf("nil object ID returned for application"), "Bad API Response")
	}

	id := stable.NewApplicationID(*app.Id)
	d.SetId(id.ID())

	tf.Set(d, "api", flattenApplicationApi(app.Api, true))
	tf.Set(d, "app_roles", applications.FlattenAppRoles(app.AppRoles))
	tf.Set(d, "app_role_ids", applications.FlattenAppRoleIDs(app.AppRoles))
	tf.Set(d, "client_id", app.AppId.GetOrZero())
	tf.Set(d, "device_only_auth_enabled", app.IsDeviceOnlyAuthSupported.GetOrZero())
	tf.Set(d, "disabled_by_microsoft", app.DisabledByMicrosoftStatus.GetOrZero())
	tf.Set(d, "display_name", app.DisplayName.GetOrZero())
	tf.Set(d, "fallback_public_client_enabled", app.IsFallbackPublicClient.GetOrZero())
	tf.Set(d, "feature_tags", applications.FlattenFeatures(app.Tags, false))
	tf.Set(d, "group_membership_claims", flattenApplicationGroupMembershipClaims(app.GroupMembershipClaims))
	tf.Set(d, "identifier_uris", tf.FlattenStringSlicePtr(app.IdentifierUris))
	tf.Set(d, "notes", app.Notes.GetOrZero())
	tf.Set(d, "object_id", pointer.From(app.Id))
	tf.Set(d, "optional_claims", flattenApplicationOptionalClaims(app.OptionalClaims))
	tf.Set(d, "public_client", flattenApplicationPublicClient(app.PublicClient))
	tf.Set(d, "publisher_domain", app.PublisherDomain.GetOrZero())
	tf.Set(d, "required_resource_access", flattenApplicationRequiredResourceAccess(app.RequiredResourceAccess))
	tf.Set(d, "service_management_reference", app.ServiceManagementReference.GetOrZero())
	tf.Set(d, "sign_in_audience", app.SignInAudience.GetOrZero())
	tf.Set(d, "single_page_application", flattenApplicationSpa(app.Spa))
	tf.Set(d, "tags", tf.FlattenStringSlicePtr(app.Tags))
	tf.Set(d, "web", flattenApplicationWeb(app.Web))

	if app.Api != nil {
		tf.Set(d, "oauth2_permission_scope_ids", applications.FlattenOAuth2PermissionScopeIDs(app.Api.OAuth2PermissionScopes))
	}

	if app.Info != nil {
		tf.Set(d, "logo_url", app.Info.LogoUrl.GetOrZero())
		tf.Set(d, "marketing_url", app.Info.MarketingUrl.GetOrZero())
		tf.Set(d, "privacy_statement_url", app.Info.PrivacyStatementUrl.GetOrZero())
		tf.Set(d, "support_url", app.Info.SupportUrl.GetOrZero())
		tf.Set(d, "terms_of_service_url", app.Info.TermsOfServiceUrl.GetOrZero())
	}

	// API bug: the v1.0 API does not return the `oauth2RequiredPostResponse` field, so retrieve it using the beta API
	// See https://github.com/microsoftgraph/msgraph-metadata/issues/273
	respBeta, err := clientBeta.GetApplication(ctx, beta.ApplicationId(id), applicationBeta.GetApplicationOperationOptions{
		Select: pointer.To([]string{"oauth2RequirePostResponse"}),
	})
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving additional properties for %s", id)
	}

	appBeta := respBeta.Model
	if appBeta == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", id)
	}

	tf.Set(d, "oauth2_post_response_required", pointer.From(appBeta.OAuth2RequirePostResponse))

	ownersResp, err := ownerClient.ListOwners(ctx, id, owner.DefaultListOwnersOperationOptions())
	if err != nil {
		return tf.ErrorDiagPathF(err, "owners", "Could not retrieve owners for %s", id)
	}
	owners := make([]string, 0)
	if ownersResp.Model != nil {
		for _, o := range *ownersResp.Model {
			owners = append(owners, pointer.From(o.DirectoryObject().Id))
		}
	}
	tf.Set(d, "owners", owners)

	return nil
}
