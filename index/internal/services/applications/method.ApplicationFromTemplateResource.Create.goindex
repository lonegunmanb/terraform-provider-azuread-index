package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
)
func (r ApplicationFromTemplateResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationTemplateClient

			var model ApplicationFromTemplateModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			templateId := stable.NewApplicationTemplateID(model.TemplateId)

			request := applicationtemplate.InstantiateRequest{
				DisplayName: nullable.Value(model.DisplayName),
			}

			resp, err := client.Instantiate(ctx, templateId, request, applicationtemplate.DefaultInstantiateOperationOptions())
			if err != nil {
				return fmt.Errorf("creating %s: %+v", templateId, err)
			}
			if resp.Model == nil {
				return fmt.Errorf("creating %s: model was nil", templateId)
			}
			if resp.Model.Application == nil {
				return fmt.Errorf("creating %s: application was nil", templateId)
			}
			if resp.Model.ServicePrincipal == nil {
				return fmt.Errorf("creating %s: servicePrincipal was nil", templateId)
			}

			id := parse.NewFromTemplateID(model.TemplateId, *resp.Model.Application.Id, *resp.Model.ServicePrincipal.Id)
			metadata.SetID(id)

			if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
				client := metadata.Client.Applications.ApplicationClient

				resp, err := client.GetApplication(ctx, stable.NewApplicationID(id.ApplicationId), application.DefaultGetApplicationOperationOptions())
				if err != nil {
					if response.WasNotFound(resp.HttpResponse) {
						return pointer.To(false), nil
					}
					return nil, err
				}
				return pointer.To(resp.Model != nil), nil
			}); err != nil {
				return fmt.Errorf("creating %s: timed out waiting for replication of new application", templateId)
			}

			return nil
		},
	}
}
