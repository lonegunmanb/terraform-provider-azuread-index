package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func (r ApplicationFromTemplateResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationTemplatesClient
			client.BaseClient.DisableRetries = true
			defer func() { client.BaseClient.DisableRetries = false }()

			var model ApplicationFromTemplateModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			properties := msgraph.ApplicationTemplate{
				DisplayName: pointer.To(model.DisplayName),
				ID:          pointer.To(model.TemplateId),
			}

			result, _, err := client.Instantiate(ctx, properties)
			if err != nil {
				return fmt.Errorf("creating %s: %+v", parse.FromTemplateId{}, err)
			}
			if result == nil {
				return fmt.Errorf("creating %s: result was nil", parse.FromTemplateId{})
			}
			if result.Application == nil {
				return fmt.Errorf("creating %s: application was nil", parse.FromTemplateId{})
			}
			if result.ServicePrincipal == nil {
				return fmt.Errorf("creating %s: servicePrincipal was nil", parse.FromTemplateId{})
			}

			id := parse.NewFromTemplateID(model.TemplateId, *result.Application.ID(), *result.ServicePrincipal.ID())
			metadata.SetID(id)

			if err = helpers.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
				client := metadata.Client.Applications.ApplicationsClient
				client.BaseClient.DisableRetries = true
				defer func() { client.BaseClient.DisableRetries = false }()

				result, status, err := client.Get(ctx, *result.Application.ID(), odata.Query{})
				if err != nil {
					if status == http.StatusNotFound {
						return pointer.To(false), nil
					}
					return nil, err
				}
				return pointer.To(result != nil), nil
			}); err != nil {
				return fmt.Errorf("creating %s: timed out waiting for replication of new application", parse.FromTemplateId{})
			}

			return nil
		},
	}
}
