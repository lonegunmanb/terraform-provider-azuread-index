package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
)
func (r ApplicationRegistrationResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			id, err := stable.ParseApplicationID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.GetApplication(ctx, *id, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			app := resp.Model
			if app == nil {
				return fmt.Errorf("retrieving %s: model was nil", id)
			}

			state := ApplicationRegistrationModel{
				ClientId:                   app.AppId.GetOrZero(),
				Description:                app.Description.GetOrZero(),
				DisplayName:                app.DisplayName.GetOrZero(),
				GroupMembershipClaims:      tf.ExpandStringSlice(flattenApplicationGroupMembershipClaims(app.GroupMembershipClaims)),
				Notes:                      app.Notes.GetOrZero(),
				ObjectId:                   pointer.From(app.Id),
				PublisherDomain:            app.PublisherDomain.GetOrZero(),
				ServiceManagementReference: app.ServiceManagementReference.GetOrZero(),
				SignInAudience:             app.SignInAudience.GetOrZero(),
			}

			if api := app.Api; api != nil {
				state.RequestedAccessTokenVersion = int(api.RequestedAccessTokenVersion.GetOrZero())
			}

			if info := app.Info; info != nil {
				state.MarketingUrl = info.MarketingUrl.GetOrZero()
				state.PrivacyStatementUrl = info.PrivacyStatementUrl.GetOrZero()
				state.SupportUrl = info.SupportUrl.GetOrZero()
				state.TermsOfServiceUrl = info.TermsOfServiceUrl.GetOrZero()
			}

			if web := app.Web; web != nil {
				state.HomepageUrl = web.HomePageUrl.GetOrZero()
				state.LogoutUrl = web.LogoutUrl.GetOrZero()

				if implicitGrant := web.ImplicitGrantSettings; implicitGrant != nil {
					state.ImplicitAccessTokenIssuanceEnabled = implicitGrant.EnableAccessTokenIssuance.GetOrZero()
					state.ImplicitIdTokenIssuanceEnabled = implicitGrant.EnableIdTokenIssuance.GetOrZero()
				}
			}

			if app.DisabledByMicrosoftStatus != nil {
				state.DisabledByMicrosoft = fmt.Sprintf("%v", app.DisabledByMicrosoftStatus)
			}

			return metadata.Encode(&state)
		},
	}
}
