package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func (r ApplicationIdentifierUriResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationsClient
			client.BaseClient.DisableRetries = true
			defer func() { client.BaseClient.DisableRetries = false }()

			var model ApplicationIdentifierUriModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			applicationId, err := parse.ParseApplicationID(model.ApplicationId)
			if err != nil {
				return err
			}

			identifierUriSegment := base64.StdEncoding.EncodeToString([]byte(model.IdentifierUri))
			id := parse.NewIdentifierUriID(applicationId.ApplicationId, identifierUriSegment)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			result, _, err := client.Get(ctx, applicationId.ApplicationId, odata.Query{})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}
			if result == nil {
				return fmt.Errorf("retrieving %s: result was nil", applicationId)
			}

			newIdentifierUris := make([]string, 0)

			// Don't forget any existing identifier URIs, since they must be updated together
			if result.IdentifierUris != nil {
				newIdentifierUris = *result.IdentifierUris
			}

			// Check for existing identifier URI
			for _, uri := range newIdentifierUris {
				if uri == model.IdentifierUri {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
			}

			newIdentifierUris = append(newIdentifierUris, model.IdentifierUri)

			properties := msgraph.Application{
				DirectoryObject: msgraph.DirectoryObject{
					Id: &id.ApplicationId,
				},
				IdentifierUris: &newIdentifierUris,
			}

			if _, err = client.Update(ctx, properties); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
