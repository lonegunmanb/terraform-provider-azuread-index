package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
)
func applicationValidateRolesScopes(appRoles, oauth2Permissions []interface{}) error {
	type appPermission struct {
		id          string
		displayName string
		description string
		enabled     bool
		value       string
	}
	var appPermissions []appPermission

	for _, roleRaw := range appRoles {
		if roleRaw == nil {
			continue
		}
		role := roleRaw.(map[string]interface{})
		permission := appPermission{
			id:          role["id"].(string),
			displayName: role["display_name"].(string),
			description: role["description"].(string),
			enabled:     role["enabled"].(bool),
			value:       role["value"].(string),
		}
		if pluginsdk.ValueIsNotEmptyOrUnknown(permission.id) && pluginsdk.ValueIsNotEmptyOrUnknown(permission.value) {
			appPermissions = append(appPermissions, permission)
		}
	}

	for _, scopeRaw := range oauth2Permissions {
		if scopeRaw == nil {
			continue
		}
		scope := scopeRaw.(map[string]interface{})
		permission := appPermission{
			id:          scope["id"].(string),
			displayName: scope["admin_consent_display_name"].(string),
			description: scope["admin_consent_description"].(string),
			enabled:     scope["enabled"].(bool),
			value:       scope["value"].(string),
		}
		if pluginsdk.ValueIsNotEmptyOrUnknown(permission.id) && pluginsdk.ValueIsNotEmptyOrUnknown(permission.value) {
			appPermissions = append(appPermissions, permission)
		}
	}

	encounteredPermissions := make([]appPermission, 0)
	for _, ap := range appPermissions {
		for _, ep := range encounteredPermissions {
			if ap.id == ep.id && ap.value != ep.value {
				return fmt.Errorf("validation failed: duplicate ID found: %q", ap.id)
			}
			if ap.value == ep.value && ap.id != ep.id {
				return fmt.Errorf("validation failed: duplicate value found: %q", ap.value)
			}
			if ap.value == ep.value && ap.id == ep.id && !reflect.DeepEqual(ap, ep) {
				return fmt.Errorf(`validation failed: The following values must match for the
				'oauth2Permissions' and 'appRoles' properties with identifier '%q': (description, adminConsentDescription),
				(displayName, adminConsentDisplayName),(isEnabled,isEnabled),(origin, origin),(value, value).
				Ensure that you are intending to have entries with the same identifier, and if so, are updating them together`, ap.id)
			}
		}
		encounteredPermissions = append(encounteredPermissions, ap)
	}

	return nil
}
