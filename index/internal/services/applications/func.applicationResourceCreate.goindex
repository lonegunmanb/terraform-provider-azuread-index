package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/migrations"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	applicationsValidate "github.com/hashicorp/terraform-provider-azuread/internal/services/applications/validate"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func applicationResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Applications.ApplicationsClientBeta
	appTemplatesClient := meta.(*clients.Client).Applications.ApplicationTemplatesClient
	directoryObjectsClient := meta.(*clients.Client).Applications.DirectoryObjectsClient
	callerId := meta.(*clients.Client).ObjectID
	tenantId := meta.(*clients.Client).TenantID
	displayName := d.Get("display_name").(string)
	templateId := d.Get("template_id").(string)

	// Perform this check at apply time to catch any duplicate names created during the same apply
	if d.Get("prevent_duplicate_names").(bool) {
		result, err := applicationFindByName(ctx, client, displayName)
		if err != nil {
			return tf.ErrorDiagPathF(err, "name", "Could not check for existing application(s)")
		}
		if result != nil && len(*result) > 0 {
			existingApp := (*result)[0]
			if existingApp.ID() == nil {
				return tf.ErrorDiagF(errors.New("API returned application with nil object ID during duplicate name check"), "Bad API response")
			}
			return tf.ImportAsDuplicateDiag("azuread_application", *existingApp.ID(), displayName)
		}
	}

	var imageContentType string
	var imageData []byte
	if v, ok := d.GetOk("logo_image"); ok && v != "" {
		var err error
		imageContentType, imageData, err = applicationParseLogoImage(v.(string))
		if err != nil {
			return tf.ErrorDiagPathF(err, "image", "Could not decode image data")
		}
	}

	var tags []string
	if v, ok := d.GetOk("feature_tags"); ok {
		tags = helpers.ApplicationExpandFeatures(v.([]interface{}))
	} else {
		tags = tf.ExpandStringSlice(d.Get("tags").(*pluginsdk.Set).List())
	}

	if templateId != "" {
		// Validate the template exists
		if _, status, err := appTemplatesClient.Get(ctx, templateId, odata.Query{}); err != nil {
			if status == http.StatusNotFound {
				return tf.ErrorDiagPathF(err, "template_id", "Could not find application template with ID %q", templateId)
			}
			return tf.ErrorDiagF(err, "Could not retrieve application template with ID %q", templateId)
		}

		// Generate a temporary display name to assert uniqueness when handling buggy 404 when instantiating
		uuid, err := uuid.GenerateUUID()
		if err != nil {
			return tf.ErrorDiagF(err, "Failed to generate a UUID")
		}
		tempDisplayName := fmt.Sprintf("TERRAFORM_INSTANTIATE_%s", uuid)

		// Instantiate application from template gallery and return via the update function
		properties := msgraph.ApplicationTemplate{
			ID:          pointer.To(templateId),
			DisplayName: pointer.To(tempDisplayName),
		}

		// When the /instantiate operation returns 404, it has probably created the application anyway. There is no way to tell this
		// other than polling for the application object which is created out-of-band, so we create it with a quasi-unique temporary
		// displayName and then poll for it.
		result, status, err := appTemplatesClient.Instantiate(ctx, properties)
		if err != nil {
			if status != http.StatusNotFound {
				return tf.ErrorDiagF(err, "Could not instantiate application from template")
			}

			deadline, ok := ctx.Deadline()
			if !ok {
				return tf.ErrorDiagF(errors.New("context has no deadline"), "internal-error: context has no deadline")
			}

			// Since the API response can't be trusted, we'll have to take on responsibility for ensuring
			// the application object and service principal objects were created as expected.
			pollingResult, err := (&pluginsdk.StateChangeConf{ //nolint:staticcheck
				Pending:    []string{"Waiting"},
				Target:     []string{"Found"},
				Timeout:    time.Until(deadline),
				MinTimeout: 5 * time.Second,
				Refresh: func() (interface{}, string, error) {
					// List applications with matching applicationTemplateId and displayName (using the temporary display name we generated above)
					filter := fmt.Sprintf("applicationTemplateId eq '%s' and displayName eq '%s'", odata.EscapeSingleQuote(templateId), odata.EscapeSingleQuote(tempDisplayName))
					applicationsResult, _, err := client.List(ctx, odata.Query{Filter: filter})
					if err != nil {
						return nil, "Error", err
					}
					if applicationsResult == nil {
						return nil, "Waiting", nil
					}
					for _, application := range *applicationsResult {
						if id := application.ID(); id != nil && application.AppId != nil && application.ApplicationTemplateId != nil && *application.ApplicationTemplateId == templateId && application.DisplayName != nil && *application.DisplayName == tempDisplayName {
							// We should ensure the service principal was also created
							servicePrincipalsClient := meta.(*clients.Client).Applications.ServicePrincipalsClient

							// List service principals for the created application
							servicePrincipalsFilter := fmt.Sprintf("appId eq '%s'", odata.EscapeSingleQuote(*application.AppId))
							servicePrincipalsResult, _, err := servicePrincipalsClient.List(ctx, odata.Query{Filter: servicePrincipalsFilter})
							if err != nil {
								return nil, "Error", err
							}
							if servicePrincipalsResult == nil {
								return nil, "Waiting", nil
							}
							for _, servicePrincipal := range *servicePrincipalsResult {
								// Validate the appId and applicationTemplateId match the application
								if servicePrincipalId := servicePrincipal.ID(); servicePrincipalId != nil && servicePrincipal.AppId != nil && *servicePrincipal.AppId == *application.AppId && servicePrincipal.ApplicationTemplateId != nil && *servicePrincipal.ApplicationTemplateId == templateId {
									return msgraph.ApplicationTemplate{
										Application:      &application,
										ServicePrincipal: &servicePrincipal,
									}, "Found", nil
								}
							}
						}
					}
					return nil, "Waiting", nil
				},
			}).WaitForStateContext(ctx)

			if err != nil {
				return tf.ErrorDiagF(err, "Could not instantiate application from template")
			}
			if pollingResult == nil {
				return tf.ErrorDiagF(errors.New("attempted to poll for application and service principal but they were not found"), "Could not instantiate application from template")
			}

			if template, ok := pollingResult.(msgraph.ApplicationTemplate); ok {
				result = &template
			}
		}

		if result.Application == nil {
			return tf.ErrorDiagF(errors.New("Bad API response"), "Nil application object returned for instantiated application")
		}

		if result.Application.ID() == nil || *result.Application.ID() == "" {
			return tf.ErrorDiagF(errors.New("Bad API response"), "Object ID returned for instantiated application is nil/empty")
		}

		id := parse.NewApplicationID(*result.Application.ID())
		d.SetId(id.ID())

		// The application was created out of band, so we'll update it just as if it was imported. This will also
		// set the correct displayName for the application.
		return applicationResourceUpdate(ctx, d, meta)
	}

	api := expandApplicationApi(d.Get("api").([]interface{}))

	// API bug: cannot set `acceptMappedClaims` when holding the Application.ReadWrite.OwnedBy role
	// See https://github.com/hashicorp/terraform-provider-azuread/issues/914
	var acceptMappedClaims *bool
	if api.AcceptMappedClaims != nil && *api.AcceptMappedClaims {
		acceptMappedClaims = api.AcceptMappedClaims
		api.AcceptMappedClaims = nil
	}

	// Create a new application
	properties := msgraph.Application{
		Api:                   api,
		AppRoles:              expandApplicationAppRoles(d.Get("app_role").(*pluginsdk.Set).List()),
		Description:           tf.NullableString(d.Get("description").(string)),
		DisplayName:           pointer.To(displayName),
		GroupMembershipClaims: expandApplicationGroupMembershipClaims(d.Get("group_membership_claims").(*pluginsdk.Set).List()),
		IdentifierUris:        tf.ExpandStringSlicePtr(d.Get("identifier_uris").(*pluginsdk.Set).List()),
		Info: &msgraph.InformationalUrl{
			MarketingUrl:        tf.NullableString(d.Get("marketing_url").(string)),
			PrivacyStatementUrl: tf.NullableString(d.Get("privacy_statement_url").(string)),
			SupportUrl:          tf.NullableString(d.Get("support_url").(string)),
			TermsOfServiceUrl:   tf.NullableString(d.Get("terms_of_service_url").(string)),
		},
		IsDeviceOnlyAuthSupported:  pointer.To(d.Get("device_only_auth_enabled").(bool)),
		IsFallbackPublicClient:     pointer.To(d.Get("fallback_public_client_enabled").(bool)),
		Notes:                      tf.NullableString(d.Get("notes").(string)),
		Oauth2RequirePostResponse:  pointer.To(d.Get("oauth2_post_response_required").(bool)),
		OptionalClaims:             expandApplicationOptionalClaims(d.Get("optional_claims").([]interface{})),
		PublicClient:               expandApplicationPublicClient(d.Get("public_client").([]interface{})),
		RequiredResourceAccess:     expandApplicationRequiredResourceAccess(d.Get("required_resource_access").(*pluginsdk.Set).List()),
		ServiceManagementReference: tf.NullableString(d.Get("service_management_reference").(string)),
		SignInAudience:             pointer.To(d.Get("sign_in_audience").(string)),
		Spa:                        expandApplicationSpa(d.Get("single_page_application").([]interface{})),
		Tags:                       &tags,
		Web:                        expandApplicationWeb(d.Get("web").([]interface{})),
	}

	// Generate an application password, if specified
	if v, ok := d.GetOk("password"); ok {
		password := v.(*pluginsdk.Set).List()
		if len(password) > 1 {
			return tf.ErrorDiagPathF(errors.New("`password` must have one element"), "password", "Multiple passwords are not supported with this resource")
		}

		credentials, err := expandApplicationPasswordCredentials(password)
		if err != nil {
			return tf.ErrorDiagPathF(err, "password", "Could not flatten application password credentials")
		}

		properties.PasswordCredentials = credentials
	}

	// Sort the owners into two slices, the first containing up to 20 and the rest overflowing to the second slice
	// The calling principal should always be in the first slice of owners
	callerObject, _, err := directoryObjectsClient.Get(ctx, callerId, odata.Query{})
	if err != nil {
		return tf.ErrorDiagF(err, "Could not retrieve calling principal object %q", callerId)
	}
	if callerObject == nil {
		return tf.ErrorDiagF(errors.New("returned callerObject was nil"), "Could not retrieve calling principal object %q", callerId)
	}

	// @odata.id returned by API cannot be relied upon, so construct our own
	callerObject.ODataId = (*odata.Id)(pointer.To(fmt.Sprintf("%s/v1.0/%s/directoryObjects/%s",
		client.BaseClient.Endpoint, tenantId, callerId)))

	ownersFirst20 := msgraph.Owners{*callerObject}
	var ownersExtra msgraph.Owners

	// Track whether we need to remove the calling principal later on
	removeCallerOwner := true

	// Retrieve and set the initial owners, which can be up to 20 in total when creating the application
	if v, ok := d.GetOk("owners"); ok {
		ownerCount := 0
		for _, ownerIdRaw := range v.(*pluginsdk.Set).List() {
			ownerId := ownerIdRaw.(string)

			// If the calling principal was found in the specified owners, we won't remove them later
			if strings.EqualFold(ownerId, callerId) {
				removeCallerOwner = false
				continue
			}

			ownerObject := msgraph.DirectoryObject{
				ODataId: (*odata.Id)(pointer.To(fmt.Sprintf("%s/v1.0/%s/directoryObjects/%s",
					client.BaseClient.Endpoint, tenantId, ownerId))),
				Id: &ownerId,
			}

			if ownerCount < 19 {
				ownersFirst20 = append(ownersFirst20, ownerObject)
			} else {
				ownersExtra = append(ownersExtra, ownerObject)
			}
			ownerCount++
		}
	}

	// Set the initial owners, which should include the calling principal plus up to 19 of owners specified in configuration
	properties.Owners = &ownersFirst20

	app, _, err := client.Create(ctx, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Could not create application")
	}

	if app.ID() == nil || *app.ID() == "" {
		return tf.ErrorDiagF(errors.New("Bad API response"), "Object ID returned for application is nil/empty")
	}

	id := parse.NewApplicationID(*app.ID())
	d.SetId(id.ID())

	// Save the password key ID and generated value to state
	if app.PasswordCredentials != nil {
		if password := d.Get("password").(*pluginsdk.Set).List(); len(password) == 1 {
			pw := password[0].(map[string]interface{})
			if credentials := flattenApplicationPasswordCredentials(app.PasswordCredentials); len(credentials) == 1 {
				pw["key_id"] = credentials[0]["key_id"]
				pw["value"] = credentials[0]["value"]
				tf.Set(d, "password", []interface{}{pw})
			}
		}
	}

	// Attempt to patch the newly created application and set the display name, which will tell us whether it exists yet, then set it back to the desired value.
	// The SDK handles retries for us here in the event of 404, 429 or 5xx, then returns after giving up.
	uuid, err := uuid.GenerateUUID()
	if err != nil {
		return tf.ErrorDiagF(err, "Failed to generate a UUID")
	}
	tempDisplayName := fmt.Sprintf("TERRAFORM_UPDATE_%s", uuid)
	for _, displayNameToSet := range []string{tempDisplayName, displayName} {
		status, err := client.Update(ctx, msgraph.Application{
			DirectoryObject: msgraph.DirectoryObject{
				Id: app.ID(),
			},
			DisplayName: pointer.To(displayNameToSet),
		})
		if err != nil {
			if status == http.StatusNotFound {
				return tf.ErrorDiagF(err, "Timed out whilst waiting for new application to be replicated in Azure AD")
			}
			return tf.ErrorDiagF(err, "Failed to patch application with object ID %q after creating", *app.ID())
		}
	}

	// API bug: cannot set `acceptMappedClaims` when holding the Application.ReadWrite.OwnedBy role
	// See https://github.com/hashicorp/terraform-provider-azuread/issues/914
	if acceptMappedClaims != nil {
		api.AcceptMappedClaims = acceptMappedClaims
		if _, err = client.Update(ctx, msgraph.Application{
			DirectoryObject: msgraph.DirectoryObject{
				Id: app.Id,
			},
			Api: api,
		}); err != nil {
			return tf.ErrorDiagPathF(err, "api.0.mapped_claims_enabled", "Failed to patch application after creating to set `api.0.mapped_claims_enabled` property")
		}
	}

	if len(ownersExtra) > 0 {
		// Add any remaining owners after the application is created
		app.Owners = &ownersExtra
		if _, err = client.AddOwners(ctx, app); err != nil {
			return tf.ErrorDiagF(err, "Could not add owners to application with object ID: %q", id.ApplicationId)
		}
	}

	// If the calling principal was not included in configuration, remove it now
	if removeCallerOwner {
		if _, err = client.RemoveOwners(ctx, id.ApplicationId, &[]string{callerId}); err != nil {
			return tf.ErrorDiagF(err, "Could not remove initial owner from application with object ID: %q", id.ApplicationId)
		}
	}

	// Upload the application image
	if imageContentType != "" && len(imageData) > 0 {
		_, err = client.UploadLogo(ctx, id.ApplicationId, imageContentType, imageData)
		if err != nil {
			return tf.ErrorDiagF(err, "Could not upload logo image for application with object ID: %q", id.ApplicationId)
		}
	}

	return applicationResourceRead(ctx, d, meta)
}
