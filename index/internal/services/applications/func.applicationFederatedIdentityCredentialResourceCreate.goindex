package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/federatedidentitycredential"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
)
func applicationFederatedIdentityCredentialResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics { //nolint
	client := meta.(*clients.Client).Applications.ApplicationClient
	federatedIdentityCredentialClient := meta.(*clients.Client).Applications.ApplicationFederatedIdentityCredential

	applicationId, err := stable.ParseApplicationID(d.Get("application_id").(string))
	if err != nil {
		return tf.ErrorDiagPathF(err, "application_id", "Parsing `application_id`")
	}

	tf.LockByName(applicationResourceName, applicationId.ApplicationId)
	defer tf.UnlockByName(applicationResourceName, applicationId.ApplicationId)

	resp, err := client.GetApplication(ctx, *applicationId, application.DefaultGetApplicationOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "retrieving %s: %+v", applicationId, err)
	}

	app := resp.Model
	if app == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "retrieving %s", applicationId)
	}

	credential := stable.FederatedIdentityCredential{
		Audiences:   tf.ExpandStringSlice(d.Get("audiences").([]interface{})),
		Description: nullable.Value(d.Get("description").(string)),
		Issuer:      d.Get("issuer").(string),
		Name:        d.Get("display_name").(string),
		Subject:     d.Get("subject").(string),
	}

	federatedIdentityCredentialResp, err := federatedIdentityCredentialClient.CreateFederatedIdentityCredential(ctx, *applicationId, credential, federatedidentitycredential.DefaultCreateFederatedIdentityCredentialOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Adding federated identity credential for %s", applicationId)
	}

	newCredential := federatedIdentityCredentialResp.Model
	if newCredential == nil {
		return tf.ErrorDiagF(errors.New("nil credential received when adding federated identity credential"), "API error adding federated identity credential for %s", applicationId)
	}
	if newCredential.Id == nil {
		return tf.ErrorDiagF(errors.New("nil or empty ID received"), "API error adding federated identity credential for %s", applicationId)
	}

	id := stable.NewApplicationIdFederatedIdentityCredentialID(applicationId.ApplicationId, *newCredential.Id)

	// Wait for the credential to replicate
	timeout, _ := ctx.Deadline()
	polledForCredential, err := (&pluginsdk.StateChangeConf{ //nolint:staticcheck
		Pending:                   []string{"Waiting"},
		Target:                    []string{"Done"},
		Timeout:                   time.Until(timeout),
		MinTimeout:                1 * time.Second,
		ContinuousTargetOccurence: 5,
		Refresh: func() (interface{}, string, error) {
			resp, err := federatedIdentityCredentialClient.GetFederatedIdentityCredential(ctx, id, federatedidentitycredential.DefaultGetFederatedIdentityCredentialOperationOptions())
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return nil, "Waiting", nil
				}
				return nil, "Error", err
			}
			credential := resp.Model
			if credential == nil {
				return nil, "Waiting", nil
			}

			return credential, "Done", nil
		},
	}).WaitForStateContext(ctx)

	if err != nil {
		return tf.ErrorDiagF(err, "Waiting for %s", id)
	} else if polledForCredential == nil {
		return tf.ErrorDiagF(errors.New("federated identity credential not found in application manifest"), "Waiting for federated identity credential%s", id)
	}

	// TODO: migrate this to a stable.ApplicationIdFederatedIdentityCredentialId
	resourceId := parse.NewCredentialID(applicationId.ApplicationId, "federatedIdentityCredential", *newCredential.Id)
	d.SetId(resourceId.String())

	return applicationFederatedIdentityCredentialResourceRead(ctx, d, meta)
}
