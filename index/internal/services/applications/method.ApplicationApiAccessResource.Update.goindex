package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
)
func (r ApplicationApiAccessResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			id, err := parse.ParseApiAccessID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model ApplicationApiAccessModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			// Prepare a new API to replace the existing one
			permissions := make([]stable.ResourceAccess, 0)
			for _, roleId := range model.RoleIds {
				permissions = append(permissions, stable.ResourceAccess{
					Id:   pointer.To(roleId),
					Type: nullable.Value(ResourceAccessTypeRole),
				})
			}
			for _, scopeId := range model.ScopeIds {
				permissions = append(permissions, stable.ResourceAccess{
					Id:   pointer.To(scopeId),
					Type: nullable.Value(ResourceAccessTypeScope),
				})
			}
			api := stable.RequiredResourceAccess{
				ResourceAppId:  &model.ApiClientId,
				ResourceAccess: &permissions,
			}

			applicationId := stable.NewApplicationID(id.ApplicationId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			resp, err := client.GetApplication(ctx, applicationId, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}

			app := resp.Model
			if app == nil || app.RequiredResourceAccess == nil {
				return fmt.Errorf("retrieving %s: requiredResourceAccess was nil", applicationId)
			}

			// Look for an API to replace
			newApis := make([]stable.RequiredResourceAccess, 0)
			found := false
			for _, existingApi := range *app.RequiredResourceAccess {
				if strings.EqualFold(*existingApi.ResourceAppId, id.ApiClientId) {
					newApis = append(newApis, api)
					found = true
				} else {
					newApis = append(newApis, existingApi)
				}
			}
			if !found {
				return fmt.Errorf("updating %s: could not identify existing API", id)
			}

			properties := stable.Application{
				Id:                     &applicationId.ApplicationId,
				RequiredResourceAccess: &newApis,
			}

			// Patch the application with the new set of APIs
			if _, err = client.UpdateApplication(ctx, applicationId, properties, application.DefaultUpdateApplicationOperationOptions()); err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}

			return nil
		},
	}
}
