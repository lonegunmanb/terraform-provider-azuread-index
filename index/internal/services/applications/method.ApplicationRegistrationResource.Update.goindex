package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
)
func (r ApplicationRegistrationResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient
			rd := metadata.ResourceData

			id, err := stable.ParseApplicationID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model ApplicationRegistrationModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			properties := stable.Application{}

			if rd.HasChange("display_name") {
				properties.DisplayName = nullable.Value(model.DisplayName)
			}

			if rd.HasChange("description") {
				properties.Description = nullable.NoZero(model.Description)
			}

			if rd.HasChange("group_membership_claims") {
				properties.GroupMembershipClaims = expandApplicationGroupMembershipClaims(tf.FlattenStringSlice(model.GroupMembershipClaims))
			}

			if rd.HasChange("notes") {
				properties.Notes = nullable.NoZero(model.Notes)
			}

			if rd.HasChange("requested_access_token_version") {
				properties.Api = &stable.ApiApplication{
					RequestedAccessTokenVersion: nullable.Value(int64(model.RequestedAccessTokenVersion)),
				}
			}

			if rd.HasChange("service_management_reference") {
				properties.ServiceManagementReference = nullable.NoZero(model.ServiceManagementReference)
			}

			if rd.HasChange("sign_in_audience") {
				properties.SignInAudience = nullable.Value(model.SignInAudience)
			}

			if rd.HasChange("marketing_url") || rd.HasChange("privacy_statement_url") || rd.HasChange("support_url") || rd.HasChange("terms_of_service_url") {
				properties.Info = &stable.InformationalUrl{}

				if rd.HasChange("marketing_url") {
					properties.Info.MarketingUrl = nullable.NoZero(model.MarketingUrl)
				}

				if rd.HasChange("privacy_statement_url") {
					properties.Info.PrivacyStatementUrl = nullable.NoZero(model.PrivacyStatementUrl)
				}

				if rd.HasChange("support_url") {
					properties.Info.SupportUrl = nullable.NoZero(model.SupportUrl)
				}

				if rd.HasChange("terms_of_service_url") {
					properties.Info.TermsOfServiceUrl = nullable.NoZero(model.TermsOfServiceUrl)
				}
			}

			if rd.HasChange("implicit_access_token_issuance_enabled") || rd.HasChange("homepage_url") || rd.HasChange("implicit_id_token_issuance_enabled") || rd.HasChange("logout_url") {
				properties.Web = &stable.WebApplication{}

				if rd.HasChange("homepage_url") {
					properties.Web.HomePageUrl = nullable.NoZero(model.HomepageUrl)
				}

				if rd.HasChange("logout_url") {
					properties.Web.LogoutUrl = nullable.NoZero(model.LogoutUrl)
				}

				if rd.HasChange("implicit_access_token_issuance_enabled") || rd.HasChange("implicit_id_token_issuance_enabled") {
					properties.Web.ImplicitGrantSettings = &stable.ImplicitGrantSettings{}

					if rd.HasChange("implicit_access_token_issuance_enabled") {
						properties.Web.ImplicitGrantSettings.EnableAccessTokenIssuance = nullable.Value(model.ImplicitAccessTokenIssuanceEnabled)
					}

					if rd.HasChange("implicit_id_token_issuance_enabled") {
						properties.Web.ImplicitGrantSettings.EnableIdTokenIssuance = nullable.Value(model.ImplicitIdTokenIssuanceEnabled)
					}
				}
			}

			if _, err = client.UpdateApplication(ctx, *id, properties, application.DefaultUpdateApplicationOperationOptions()); err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}

			return nil
		},
	}
}
