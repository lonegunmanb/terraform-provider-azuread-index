package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/applications/parse"
	applicationsValidate "github.com/hashicorp/terraform-provider-azuread/internal/services/applications/validate"
)
func (r ApplicationPermissionScopeResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			var model ApplicationPermissionScopeModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			applicationId, err := stable.ParseApplicationID(model.ApplicationId)
			if err != nil {
				return err
			}

			id := parse.NewPermissionScopeID(applicationId.ApplicationId, model.ScopeId)

			tf.LockByName(applicationResourceName, id.ApplicationId)
			defer tf.UnlockByName(applicationResourceName, id.ApplicationId)

			resp, err := client.GetApplication(ctx, *applicationId, application.DefaultGetApplicationOperationOptions())
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", applicationId, err)
			}

			app := resp.Model
			if app == nil {
				return fmt.Errorf("retrieving %s: model was nil", applicationId)
			}

			newScopes := make([]stable.PermissionScope, 0)

			// Don't forget any existing scopes, since all scopes must be updated together
			if app.Api != nil && app.Api.OAuth2PermissionScopes != nil {
				newScopes = *app.Api.OAuth2PermissionScopes
			}

			// Check for existing scope ID
			for _, scope := range newScopes {
				if strings.EqualFold(*scope.Id, id.ScopeID) {
					return metadata.ResourceRequiresImport(r.ResourceType(), id)
				}
			}

			newScopes = append(newScopes, stable.PermissionScope{
				Id:                      &model.ScopeId,
				IsEnabled:               pointer.To(true),
				AdminConsentDescription: nullable.Value(model.AdminConsentDescription),
				AdminConsentDisplayName: nullable.Value(model.AdminConsentDisplayName),
				Type:                    nullable.Value(model.Type),
				UserConsentDescription:  nullable.Value(model.UserConsentDescription),
				UserConsentDisplayName:  nullable.Value(model.UserConsentDisplayName),
				Value:                   nullable.Value(model.Value),
			})

			properties := stable.Application{
				Api: &stable.ApiApplication{
					OAuth2PermissionScopes: &newScopes,
				},
			}

			if _, err = client.UpdateApplication(ctx, *applicationId, properties, application.DefaultUpdateApplicationOperationOptions()); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)
			return nil
		},
	}
}
