package github.com/hashicorp/terraform-provider-azuread/internal/services/applications
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
)
func (r ApplicationRegistrationResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 10 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Applications.ApplicationClient

			var model ApplicationRegistrationModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			properties := stable.Application{
				DisplayName:                nullable.Value(model.DisplayName),
				Description:                nullable.NoZero(model.Description),
				GroupMembershipClaims:      expandApplicationGroupMembershipClaims(tf.FlattenStringSlice(model.GroupMembershipClaims)),
				Notes:                      nullable.NoZero(model.Notes),
				ServiceManagementReference: nullable.NoZero(model.ServiceManagementReference),
				SignInAudience:             nullable.Value(model.SignInAudience),

				Api: &stable.ApiApplication{
					RequestedAccessTokenVersion: nullable.Value(int64(model.RequestedAccessTokenVersion)),
				},

				Info: &stable.InformationalUrl{
					MarketingUrl:        nullable.NoZero(model.MarketingUrl),
					PrivacyStatementUrl: nullable.NoZero(model.PrivacyStatementUrl),
					SupportUrl:          nullable.NoZero(model.SupportUrl),
					TermsOfServiceUrl:   nullable.NoZero(model.TermsOfServiceUrl),
				},

				Web: &stable.WebApplication{
					HomePageUrl: nullable.NoZero(model.HomepageUrl),
					LogoutUrl:   nullable.NoZero(model.LogoutUrl),

					ImplicitGrantSettings: &stable.ImplicitGrantSettings{
						EnableAccessTokenIssuance: nullable.Value(model.ImplicitAccessTokenIssuanceEnabled),
						EnableIdTokenIssuance:     nullable.Value(model.ImplicitIdTokenIssuanceEnabled),
					},
				},
			}

			resp, err := client.CreateApplication(ctx, properties, application.DefaultCreateApplicationOperationOptions())
			if err != nil {
				return fmt.Errorf("creating applicatoin: %+v", err)
			}

			app := resp.Model
			if app == nil || pointer.From(app.Id) == "" {
				return errors.New("creating application: object ID returned for application is nil/empty")
			}

			id := stable.NewApplicationID(*app.Id)
			metadata.SetID(id)

			return nil
		},
	}
}
