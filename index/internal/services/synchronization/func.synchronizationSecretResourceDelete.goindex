package github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func synchronizationSecretResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Synchronization.SynchronizationJobClient
	spClient := meta.(*clients.Client).Synchronization.ServicePrincipalsClient

	id, err := parse.SynchronizationSecretID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing synchronization secret with ID %q", d.Id())
	}

	tf.LockByName(servicePrincipalResourceName, id.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, id.ServicePrincipalId)

	servicePrincipal, status, err := spClient.Get(ctx, id.ServicePrincipalId, odata.Query{})
	if err != nil {
		if status == http.StatusNotFound {
			return tf.ErrorDiagPathF(nil, "service_principal_id", "Service principal with object ID %q was not found", id.ServicePrincipalId)
		}
		return tf.ErrorDiagPathF(err, "service_principal_id", "Retrieving service principal with object ID %q", id.ServicePrincipalId)
	}
	if servicePrincipal == nil || servicePrincipal.ID() == nil {
		return tf.ErrorDiagF(errors.New("nil service principal or service principal with nil ID was returned"), "API error retrieving service principal with object ID %q", id.ServicePrincipalId)
	}

	// We delete secrets by setting values to empty strings
	credentials := emptySynchronizationSecretKeyStringValuePair(d.Get("credential").([]interface{}))

	synchronizationSecret := msgraph.SynchronizationSecret{
		Credentials: credentials,
	}
	if _, err := client.SetSecrets(ctx, synchronizationSecret, id.ServicePrincipalId); err != nil {
		return tf.ErrorDiagF(err, "Removing synchronization secrets for service principal with object ID %q", id.ServicePrincipalId)
	}

	// Wait for synchronization secret to be deleted
	if err := helpers.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
		defer func() { client.BaseClient.DisableRetries = false }()
		client.BaseClient.DisableRetries = true

		synchronizationSecrets, _, _ := client.GetSecrets(ctx, id.ServicePrincipalId)

		// Test if credentials are removed
		if allCredentialsRemoved(*credentials, *synchronizationSecrets.Credentials) {
			return pointer.To(false), nil
		}

		return pointer.To(true), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for deletion of synchronization secrets from service principal with object ID %q", id.ServicePrincipalId)
	}

	return nil
}
