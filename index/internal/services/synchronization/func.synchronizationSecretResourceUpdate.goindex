package github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization/migrations"
)
func synchronizationSecretResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Synchronization.SynchronizationSecretClient

	id, err := stable.ParseServicePrincipalID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing synchronization secret ID %q", d.Id())
	}

	tf.LockByName(servicePrincipalResourceName, id.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, id.ServicePrincipalId)

	synchronizationSecrets := synchronizationsecret.SetSynchronizationSecretRequest{
		Value: expandSynchronizationSecretKeyStringValuePair(d.Get("credential").([]interface{})),
	}

	if _, err = client.SetSynchronizationSecret(ctx, *id, synchronizationSecrets, synchronizationsecret.SetSynchronizationSecretOperationOptions{RetryFunc: synchronizationRetryFunc()}); err != nil {
		return tf.ErrorDiagF(err, "Updating synchronization secret for %s", id)
	}

	// Wait for the secret to update
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.ListSynchronizationSecrets(ctx, *id, synchronizationsecret.ListSynchronizationSecretsOperationOptions{RetryFunc: synchronizationRetryFunc()})
		if err != nil {
			return pointer.To(false), fmt.Errorf("retrieving synchronization secret")
		}
		newSynchronizationSecrets := resp.Model
		if newSynchronizationSecrets == nil {
			return pointer.To(false), nil
		}
		if len(pointer.From(synchronizationSecrets.Value)) == len(pointer.From(newSynchronizationSecrets)) {
			return pointer.To(true), nil
		}
		return pointer.To(false), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for synchronization secrets for %s", id)
	}

	tf.Set(d, "credential", flattenSynchronizationSecretKeyStringValuePair(synchronizationSecrets.Value, nil))

	return synchronizationSecretResourceRead(ctx, d, meta)
}
