package github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func synchronizationJobResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Synchronization.SynchronizationJobClient
	id, err := parse.SynchronizationJobID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing synchronization job with ID %q", d.Id())
	}
	if d.HasChange("enabled") {
		if d.Get("enabled").(bool) {
			_, err := client.Start(ctx, id.JobId, id.ServicePrincipalId)
			if err != nil {
				return tf.ErrorDiagF(err, "Starting synchronization job %q", id.JobId)
			}
		} else {
			_, err := client.Pause(ctx, id.JobId, id.ServicePrincipalId)
			if err != nil {
				return tf.ErrorDiagF(err, "Pausing synchronization job %q", id.JobId)
			}
		}
	}
	return synchronizationJobResourceRead(ctx, d, meta)
}
