package github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization
import (
	"context"
	"errors"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
)
func synchronizationProvisionOnDemandResourceCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.SynchronizationJobClient
	servicePrincipalClient := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	servicePrincipalId := stable.NewServicePrincipalID(d.Get("service_principal_id").(string))

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	servicePrincipalResp, err := servicePrincipalClient.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
	if err != nil {
		if response.WasNotFound(servicePrincipalResp.HttpResponse) {
			return tf.ErrorDiagPathF(nil, "service_principal_id", "%s was not found", servicePrincipalId)
		}
		return tf.ErrorDiagPathF(err, "service_principal_id", "Retrieving %s", servicePrincipalId)
	}

	servicePrincipal := servicePrincipalResp.Model
	if servicePrincipal == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", servicePrincipalId)
	}
	if servicePrincipal.Id == nil {
		return tf.ErrorDiagF(errors.New("model has nil ID"), "Retrieving %s", servicePrincipalId)
	}

	jobId := stable.NewServicePrincipalIdSynchronizationJobID(servicePrincipalId.ServicePrincipalId, d.Get("synchronization_job_id").(string))

	jobResp, err := client.GetSynchronizationJob(ctx, jobId, synchronizationjob.GetSynchronizationJobOperationOptions{RetryFunc: synchronizationRetryFunc()})
	if err != nil {
		if response.WasNotFound(jobResp.HttpResponse) {
			return tf.ErrorDiagPathF(nil, "synchronization_job_id", "%s was not found", jobId)
		}
		return tf.ErrorDiagPathF(err, "job_id", "Retrieving %s", jobId)
	}

	job := jobResp.Model
	if job == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", jobId)
	}
	if job.Id == nil {
		return tf.ErrorDiagF(errors.New("model has nil ID"), "Retrieving %s", jobId)
	}

	properties := synchronizationjob.ProvisionSynchronizationJobOnDemandRequest{
		Parameters: expandSynchronizationJobApplicationParameters(d.Get("parameter").([]interface{})),
	}

	if _, err = client.ProvisionSynchronizationJobOnDemand(ctx, jobId, properties, synchronizationjob.DefaultProvisionSynchronizationJobOnDemandOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Provisioning %s", jobId)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	return synchronizationProvisionOnDemandResourceRead(ctx, d, meta)
}
