package github.com/hashicorp/terraform-provider-azuread/internal/services/synchronization
import (
	"net/http"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/client"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
)
func flattenSynchronizationSecretKeyStringValuePair(in *[]stable.SynchronizationSecretKeyStringValuePair, current []interface{}) []interface{} {
	if in == nil {
		return []interface{}{}
	}

	credentials := make([]interface{}, 0)
	for _, item := range *in {
		value := item.Value.GetOrZero()
		if value == "*" && current != nil {
			// Use value from state if API returns * indicating sensitive data
			for _, raw := range current {
				if raw == nil {
					continue
				}
				currentItem := raw.(map[string]interface{})
				if currentItem["key"].(string) == string(pointer.From(item.Key)) {
					value = currentItem["value"].(string)
				}
			}
		}
		credential := map[string]interface{}{
			"key":   pointer.From(item.Key),
			"value": value,
		}
		credentials = append(credentials, credential)
	}

	return credentials
}
