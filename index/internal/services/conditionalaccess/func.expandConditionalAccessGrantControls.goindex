package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
)
func expandConditionalAccessGrantControls(in []interface{}) (*stable.ConditionalAccessGrantControls, error) {
	if len(in) == 0 || in[0] == nil {
		return nil, nil
	}

	result := stable.ConditionalAccessGrantControls{}
	config := in[0].(map[string]interface{})

	if id := config["authentication_strength_policy_id"].(string); id != "" {
		policyId, err := stable.ParsePolicyAuthenticationStrengthPolicyID(id)
		if err != nil {
			return nil, err
		}
		result.AuthenticationStrength = &stable.AuthenticationStrengthPolicy{
			Id: pointer.To(policyId.AuthenticationStrengthPolicyId),
		}
	}

	builtInControls := make([]stable.ConditionalAccessGrantControl, 0)
	for _, elem := range config["built_in_controls"].([]interface{}) {
		builtInControls = append(builtInControls, stable.ConditionalAccessGrantControl(elem.(string)))
	}

	result.BuiltInControls = &builtInControls
	result.CustomAuthenticationFactors = tf.ExpandStringSlicePtr(config["custom_authentication_factors"].([]interface{}))
	result.Operator = nullable.Value(config["operator"].(string))
	result.TermsOfUse = tf.ExpandStringSlicePtr(config["terms_of_use"].([]interface{}))

	return &result, nil
}
