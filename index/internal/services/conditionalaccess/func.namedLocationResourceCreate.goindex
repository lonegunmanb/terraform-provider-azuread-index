package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identity/stable/conditionalaccessnamedlocation"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess/migrations"
)
func namedLocationResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ConditionalAccess.NamedLocationClient

	if v, ok := d.GetOk("ip"); ok {
		properties := expandIPNamedLocation(v.([]interface{}))
		properties.DisplayName = pointer.To(d.Get("display_name").(string))

		resp, err := client.CreateConditionalAccessNamedLocation(ctx, *properties, conditionalaccessnamedlocation.DefaultCreateConditionalAccessNamedLocationOperationOptions())
		if err != nil {
			return tf.ErrorDiagF(err, "Could not create named location")
		}

		if resp.Model == nil {
			return tf.ErrorDiagF(errors.New("returned model was nil"), "Bad API Response")
		}

		namedLocation, ok := resp.Model.(stable.IPNamedLocation)
		if !ok {
			return tf.ErrorDiagF(errors.New("returned model was not an IPNamedLocation"), "Bad API response")
		}

		if namedLocation.Id == nil {
			return tf.ErrorDiagF(errors.New("nil/empty object ID returned for named location"), "Bad API response")
		}

		id := stable.NewIdentityConditionalAccessNamedLocationID(*namedLocation.Id)
		d.SetId(id.ID())

	} else if v, ok = d.GetOk("country"); ok {
		properties := expandCountryNamedLocation(v.([]interface{}))
		properties.DisplayName = pointer.To(d.Get("display_name").(string))

		resp, err := client.CreateConditionalAccessNamedLocation(ctx, *properties, conditionalaccessnamedlocation.DefaultCreateConditionalAccessNamedLocationOperationOptions())
		if err != nil {
			return tf.ErrorDiagF(err, "Could not create named location")
		}

		if resp.Model == nil {
			return tf.ErrorDiagF(errors.New("returned model was nil"), "Bad API Response")
		}

		namedLocation, ok := resp.Model.(stable.CountryNamedLocation)
		if !ok {
			return tf.ErrorDiagF(errors.New("returned model was not a CountryNamedLocation"), "Bad API response")
		}

		if namedLocation.Id == nil {
			return tf.ErrorDiagF(errors.New("nil/empty object ID returned for named location"), "Bad API response")
		}

		id := stable.NewIdentityConditionalAccessNamedLocationID(*namedLocation.Id)
		d.SetId(id.ID())

	} else {
		return tf.ErrorDiagF(errors.New("one of `ip` or `country` must be specified"), "Unable to determine named location type")
	}

	return namedLocationResourceRead(ctx, d, meta)
}
