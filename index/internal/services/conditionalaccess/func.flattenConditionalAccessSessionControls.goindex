package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
)
func flattenConditionalAccessSessionControls(in *stable.ConditionalAccessSessionControls) []interface{} {
	if in == nil {
		return []interface{}{}
	}

	applicationEnforceRestrictions := false
	if in.ApplicationEnforcedRestrictions != nil {
		applicationEnforceRestrictions = in.ApplicationEnforcedRestrictions.IsEnabled.GetOrZero()
	}

	cloudAppSecurity := ""
	if in.CloudAppSecurity != nil {
		cloudAppSecurity = string(pointer.From(in.CloudAppSecurity.CloudAppSecurityType))
	}

	disableResilienceDefaults := false
	if in.DisableResilienceDefaults != nil {
		disableResilienceDefaults = in.DisableResilienceDefaults.GetOrZero()
	}

	signInFrequency := 0
	signInFrequencyAuthenticationType := ""
	signInFrequencyInterval := ""
	signInFrequencyPeriod := ""
	if in.SignInFrequency != nil {
		if !in.SignInFrequency.Value.IsNull() && in.SignInFrequency.Type != nil {
			signInFrequency = int(in.SignInFrequency.Value.GetOrZero())
			signInFrequencyPeriod = string(*in.SignInFrequency.Type)
		}

		signInFrequencyAuthenticationType = string(pointer.From(in.SignInFrequency.AuthenticationType))
		signInFrequencyInterval = string(pointer.From(in.SignInFrequency.FrequencyInterval))
	}

	persistentBrowserMode := ""
	if in.PersistentBrowser != nil {
		persistentBrowserMode = string(pointer.From(in.PersistentBrowser.Mode))
	}

	return []interface{}{
		map[string]interface{}{
			"application_enforced_restrictions_enabled": applicationEnforceRestrictions,
			"cloud_app_security_policy":                 cloudAppSecurity,
			"disable_resilience_defaults":               disableResilienceDefaults,
			"persistent_browser_mode":                   persistentBrowserMode,
			"sign_in_frequency":                         signInFrequency,
			"sign_in_frequency_authentication_type":     signInFrequencyAuthenticationType,
			"sign_in_frequency_interval":                signInFrequencyInterval,
			"sign_in_frequency_period":                  signInFrequencyPeriod,
		},
	}
}
