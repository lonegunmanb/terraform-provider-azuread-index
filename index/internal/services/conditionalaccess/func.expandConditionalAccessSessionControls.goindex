package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
)
func expandConditionalAccessSessionControls(in []interface{}) *stable.ConditionalAccessSessionControls {
	result := stable.ConditionalAccessSessionControls{}

	if len(in) == 0 || in[0] == nil {
		return &result
	}

	config := in[0].(map[string]interface{})

	result.ApplicationEnforcedRestrictions = &stable.ApplicationEnforcedRestrictionsSessionControl{
		IsEnabled: nullable.Value(config["application_enforced_restrictions_enabled"].(bool)),
	}

	if cloudAppSecurity := config["cloud_app_security_policy"]; cloudAppSecurity.(string) != "" {
		result.CloudAppSecurity = &stable.CloudAppSecuritySessionControl{
			IsEnabled:            nullable.Value(true),
			CloudAppSecurityType: pointer.To(stable.CloudAppSecuritySessionControlType(cloudAppSecurity.(string))),
		}
	}

	DisableResilienceDefaults := config["disable_resilience_defaults"]
	result.DisableResilienceDefaults = nullable.Value(DisableResilienceDefaults.(bool))

	if persistentBrowserMode := config["persistent_browser_mode"]; persistentBrowserMode.(string) != "" {
		result.PersistentBrowser = &stable.PersistentBrowserSessionControl{
			IsEnabled: nullable.Value(true),
			Mode:      pointer.To(stable.PersistentBrowserSessionMode(persistentBrowserMode.(string))),
		}
	}

	signInFrequency := stable.SignInFrequencySessionControl{}
	if frequencyValue := config["sign_in_frequency"].(int); frequencyValue > 0 {
		signInFrequency.IsEnabled = nullable.Value(true)
		signInFrequency.Type = pointer.To(stable.SigninFrequencyType(config["sign_in_frequency_period"].(string)))
		signInFrequency.Value = nullable.Value(int64(frequencyValue))

		// AuthenticationType and FrequencyInterval must be set to default values here
		signInFrequency.AuthenticationType = pointer.To(stable.SignInFrequencyAuthenticationType_PrimaryAndSecondaryAuthentication)
		signInFrequency.FrequencyInterval = pointer.To(stable.SignInFrequencyInterval_TimeBased)
	}

	if authenticationType, ok := config["sign_in_frequency_authentication_type"]; ok && authenticationType.(string) != "" {
		signInFrequency.AuthenticationType = pointer.To(stable.SignInFrequencyAuthenticationType(authenticationType.(string)))
	}

	if interval, ok := config["sign_in_frequency_interval"]; ok && interval.(string) != "" {
		signInFrequency.FrequencyInterval = pointer.To(stable.SignInFrequencyInterval(interval.(string)))
	}

	// API returns 400 error if signInFrequency is set with all default/zero values
	if (signInFrequency.IsEnabled.GetOrZero()) ||
		(signInFrequency.FrequencyInterval != nil && *signInFrequency.FrequencyInterval != stable.SignInFrequencyInterval_TimeBased) ||
		(signInFrequency.AuthenticationType != nil && *signInFrequency.AuthenticationType != stable.SignInFrequencyAuthenticationType_PrimaryAndSecondaryAuthentication) {
		result.SignInFrequency = &signInFrequency
	}

	// API does not accept ineffectual and sessionControls object, and it will not remove any existing sessionControls unless the entire object is set to null
	if (result.ApplicationEnforcedRestrictions == nil || !result.ApplicationEnforcedRestrictions.IsEnabled.GetOrZero()) &&
		result.CloudAppSecurity == nil && !result.DisableResilienceDefaults.GetOrZero() &&
		result.PersistentBrowser == nil && result.SignInFrequency == nil {
		return nil
	}

	return &result
}
