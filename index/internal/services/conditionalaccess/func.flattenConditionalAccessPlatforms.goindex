package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
)
func flattenConditionalAccessPlatforms(in *stable.ConditionalAccessPlatforms) []interface{} {
	if in == nil {
		return []interface{}{}
	}

	includePlatforms := make([]string, 0)
	for _, v := range pointer.From(in.IncludePlatforms) {
		includePlatforms = append(includePlatforms, string(v))
	}

	excludePlatforms := make([]string, 0)
	for _, v := range pointer.From(in.ExcludePlatforms) {
		excludePlatforms = append(excludePlatforms, string(v))
	}

	return []interface{}{
		map[string]interface{}{
			"included_platforms": includePlatforms,
			"excluded_platforms": excludePlatforms,
		},
	}
}
