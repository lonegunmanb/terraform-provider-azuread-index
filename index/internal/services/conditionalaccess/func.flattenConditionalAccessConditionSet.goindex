package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
)
func flattenConditionalAccessConditionSet(in *stable.ConditionalAccessConditionSet) []interface{} {
	if in == nil {
		return []interface{}{}
	}

	clientAppTypes := make([]string, 0)
	for _, v := range in.ClientAppTypes {
		clientAppTypes = append(clientAppTypes, string(v))
	}

	servicePrincipalRiskLevels := make([]string, 0)
	for _, v := range pointer.From(in.ServicePrincipalRiskLevels) {
		servicePrincipalRiskLevels = append(servicePrincipalRiskLevels, string(v))
	}

	signInRiskLevels := make([]string, 0)
	for _, v := range in.SignInRiskLevels {
		signInRiskLevels = append(signInRiskLevels, string(v))
	}

	userRiskLevels := make([]string, 0)
	for _, v := range in.UserRiskLevels {
		userRiskLevels = append(userRiskLevels, string(v))
	}

	insiderRiskLevels := ""
	if in.InsiderRiskLevels != nil {
		insiderRiskLevels = string(pointer.From(in.InsiderRiskLevels))
	}

	return []interface{}{
		map[string]interface{}{
			"applications":                  flattenConditionalAccessApplications(in.Applications),
			"client_applications":           flattenConditionalAccessClientApplications(in.ClientApplications),
			"users":                         flattenConditionalAccessUsers(in.Users),
			"client_app_types":              clientAppTypes,
			"devices":                       flattenConditionalAccessDevices(in.Devices),
			"locations":                     flattenConditionalAccessLocations(in.Locations),
			"platforms":                     flattenConditionalAccessPlatforms(in.Platforms),
			"service_principal_risk_levels": servicePrincipalRiskLevels,
			"sign_in_risk_levels":           signInRiskLevels,
			"user_risk_levels":              userRiskLevels,
			"insider_risk_levels":           insiderRiskLevels,
		},
	}
}
