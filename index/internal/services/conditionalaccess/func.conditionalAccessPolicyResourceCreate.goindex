package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identity/stable/conditionalaccesspolicy"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess/migrations"
)
func conditionalAccessPolicyResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ConditionalAccess.PolicyClient

	var err error

	var grantControls *stable.ConditionalAccessGrantControls
	if v, ok := d.GetOk("grant_controls"); ok {
		grantControls, err = expandConditionalAccessGrantControls(v.([]interface{}))
		if err != nil {
			return tf.ErrorDiagPathF(err, "grant_controls", "Parsing `grant_controls`")
		}
	}

	var sessionControls *stable.ConditionalAccessSessionControls
	if v, ok := d.GetOk("session_controls"); ok {
		sessionControls = expandConditionalAccessSessionControls(v.([]interface{}))
	}

	properties := stable.ConditionalAccessPolicy{
		DisplayName:     pointer.To(d.Get("display_name").(string)),
		State:           pointer.To(stable.ConditionalAccessPolicyState(d.Get("state").(string))),
		Conditions:      expandConditionalAccessConditionSet(d.Get("conditions").([]interface{})),
		GrantControls:   grantControls,
		SessionControls: sessionControls,
	}

	resp, err := client.CreateConditionalAccessPolicy(ctx, properties, conditionalaccesspolicy.DefaultCreateConditionalAccessPolicyOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Could not create conditional access policy")
	}

	policy := resp.Model
	if policy == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Could not create conditional access policy")
	}

	if policy.Id == nil || *policy.Id == "" {
		return tf.ErrorDiagF(errors.New("Bad API response"), "Object ID returned for conditional access policy is nil/empty")
	}

	id := stable.NewIdentityConditionalAccessPolicyID(pointer.From(policy.Id))

	// Consistency check
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetConditionalAccessPolicy(ctx, id, conditionalaccesspolicy.DefaultGetConditionalAccessPolicyOperationOptions())
		if err != nil {
			if response.WasNotFound(resp.HttpResponse) {
				return pointer.To(false), nil
			}
			return pointer.To(false), err
		}
		return pointer.To(resp.Model != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for creation of %s", id)
	}

	d.SetId(id.ID())

	return conditionalAccessPolicyResourceRead(ctx, d, meta)
}
