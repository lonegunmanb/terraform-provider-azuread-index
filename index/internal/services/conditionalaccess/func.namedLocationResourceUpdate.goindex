package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identity/stable/conditionalaccessnamedlocation"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess/migrations"
)
func namedLocationResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ConditionalAccess.NamedLocationClient

	id, err := stable.ParseIdentityConditionalAccessNamedLocationID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing Named Location ID")
	}

	if v, ok := d.GetOk("ip"); ok {
		properties := expandIPNamedLocation(v.([]interface{}))

		if d.HasChange("display_name") {
			properties.DisplayName = pointer.To(d.Get("display_name").(string))
		}

		if _, err := client.UpdateConditionalAccessNamedLocation(ctx, *id, *properties, conditionalaccessnamedlocation.DefaultUpdateConditionalAccessNamedLocationOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Updating %s", id)
		}

		if err := consistency.WaitForUpdate(ctx, ipNamedLocationWait(client, id, v)); err != nil {
			return tf.ErrorDiagF(err, "waiting for update of %s", id)
		}

	} else if v, ok := d.GetOk("country"); ok {
		properties := expandCountryNamedLocation(v.([]interface{}))

		if d.HasChange("display_name") {
			properties.DisplayName = pointer.To(d.Get("display_name").(string))
		}

		if _, err := client.UpdateConditionalAccessNamedLocation(ctx, *id, *properties, conditionalaccessnamedlocation.DefaultUpdateConditionalAccessNamedLocationOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Updating %s", id)
		}

		if err := consistency.WaitForUpdate(ctx, countryNamedLocationWait(client, id, v)); err != nil {
			return tf.ErrorDiagF(err, "waiting for update of %s", id)
		}
	}

	return namedLocationResourceRead(ctx, d, meta)
}
