package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identity/stable/conditionalaccessnamedlocation"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess/migrations"
)
func namedLocationResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ConditionalAccess.NamedLocationClient

	id, err := stable.ParseIdentityConditionalAccessNamedLocationID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing Named Location ID")
	}

	if v, ok := d.GetOk("ip"); ok {
		properties := expandIPNamedLocation(v.([]interface{}))

		if d.HasChange("display_name") {
			properties.DisplayName = pointer.To(d.Get("display_name").(string))
		}

		if _, err := client.UpdateConditionalAccessNamedLocation(ctx, *id, *properties, conditionalaccessnamedlocation.DefaultUpdateConditionalAccessNamedLocationOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Updating %s", id)
		}

		if err := consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
			resp, err := client.GetConditionalAccessNamedLocation(ctx, *id, conditionalaccessnamedlocation.DefaultGetConditionalAccessNamedLocationOperationOptions())
			if err != nil {
				return nil, err
			}

			if resp.Model == nil {
				return nil, errors.New("returned model was nil")
			}

			namedLocation, ok := resp.Model.(stable.IPNamedLocation)
			if !ok {
				return nil, errors.New("returned model was not an IPNamedLocation")
			}

			if locationRaw := flattenIPNamedLocation(&namedLocation); len(locationRaw) > 0 {
				location := locationRaw[0].(map[string]interface{})
				ip := v.([]interface{})[0].(map[string]interface{})

				if !reflect.DeepEqual(location["ip_ranges"], ip["ip_ranges"]) {
					return pointer.To(false), nil
				}

				if location["trusted"].(bool) != ip["trusted"].(bool) {
					return pointer.To(false), nil
				}
			}

			return pointer.To(true), nil
		}); err != nil {
			return tf.ErrorDiagF(err, "waiting for update of %s", id)
		}

	} else if v, ok := d.GetOk("country"); ok {
		properties := expandCountryNamedLocation(v.([]interface{}))

		if d.HasChange("display_name") {
			properties.DisplayName = pointer.To(d.Get("display_name").(string))
		}

		if _, err := client.UpdateConditionalAccessNamedLocation(ctx, *id, *properties, conditionalaccessnamedlocation.DefaultUpdateConditionalAccessNamedLocationOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Updating %s", id)
		}

		if err := consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
			resp, err := client.GetConditionalAccessNamedLocation(ctx, *id, conditionalaccessnamedlocation.DefaultGetConditionalAccessNamedLocationOperationOptions())
			if err != nil {
				return nil, err
			}

			if resp.Model == nil {
				return nil, errors.New("returned model was nil")
			}

			namedLocation, ok := resp.Model.(stable.CountryNamedLocation)
			if !ok {
				return nil, errors.New("returned model was not a CountryNamedLocation")
			}

			if locationRaw := flattenCountryNamedLocation(&namedLocation); len(locationRaw) > 0 {
				location := locationRaw[0].(map[string]interface{})
				ip := v.([]interface{})[0].(map[string]interface{})

				if !reflect.DeepEqual(location["countries_and_regions"], ip["countries_and_regions"]) {
					return pointer.To(false), nil
				}

				if location["include_unknown_countries_and_regions"].(bool) != ip["include_unknown_countries_and_regions"].(bool) {
					return pointer.To(false), nil
				}
			}

			return pointer.To(true), nil
		}); err != nil {
			return tf.ErrorDiagF(err, "waiting for update of %s", id)
		}
	}

	return namedLocationResourceRead(ctx, d, meta)
}
