package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func namedLocationResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ConditionalAccess.NamedLocationsClient
	namedLocationId := d.Id()

	if _, ok := d.GetOk("ip"); ok {
		resp, status, err := client.GetIP(ctx, namedLocationId, odata.Query{})
		if err != nil {
			if status == http.StatusNotFound {
				log.Printf("[DEBUG] Named Location with ID %q already deleted", namedLocationId)
				return nil
			}

			return tf.ErrorDiagPathF(err, "id", "Retrieving named location with ID %q", namedLocationId)
		}
		if resp != nil && resp.IsTrusted != nil && *resp.IsTrusted {
			properties := msgraph.IPNamedLocation{
				BaseNamedLocation: &msgraph.BaseNamedLocation{
					ID: &namedLocationId,
				},
				IsTrusted: pointer.To(false),
			}
			if _, err := client.UpdateIP(ctx, properties); err != nil {
				return tf.ErrorDiagF(err, "Updating named location with ID %q", namedLocationId)
			}
		}
	}

	if _, ok := d.GetOk("country"); ok {
		if _, status, err := client.GetCountry(ctx, namedLocationId, odata.Query{}); err != nil {
			if status == http.StatusNotFound {
				log.Printf("[DEBUG] Named Location with ID %q already deleted", namedLocationId)
				return nil
			}

			return tf.ErrorDiagPathF(err, "id", "Retrieving named location with ID %q", namedLocationId)
		}
	}

	status, err := client.Delete(ctx, namedLocationId)
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Deleting named location with ID %q, got status %d", namedLocationId, status)
	}

	if err := helpers.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
		defer func() { client.BaseClient.DisableRetries = false }()
		client.BaseClient.DisableRetries = true
		if _, status, err := client.Get(ctx, namedLocationId, odata.Query{}); err != nil {
			if status == http.StatusNotFound {
				return pointer.To(false), nil
			}
			return nil, err
		}
		return pointer.To(true), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "waiting for deletion of named location with ID %q", namedLocationId)
	}

	return nil
}
