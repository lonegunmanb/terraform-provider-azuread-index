package github.com/hashicorp/terraform-provider-azuread/internal/services/conditionalaccess
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func conditionalAccessPolicyResource() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		CreateContext: conditionalAccessPolicyResourceCreate,
		ReadContext:   conditionalAccessPolicyResourceRead,
		UpdateContext: conditionalAccessPolicyResourceUpdate,
		DeleteContext: conditionalAccessPolicyResourceDelete,

		CustomizeDiff: conditionalAccessPolicyCustomizeDiff,

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(5 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(15 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(5 * time.Minute),
		},

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			if _, err := uuid.ParseUUID(id); err != nil {
				return fmt.Errorf("specified ID (%q) is not valid: %s", id, err)
			}
			return nil
		}),

		Schema: map[string]*pluginsdk.Schema{
			"display_name": {
				Type:             pluginsdk.TypeString,
				Required:         true,
				ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
			},

			"state": {
				Type:     pluginsdk.TypeString,
				Required: true,
				ValidateFunc: validation.StringInSlice([]string{
					msgraph.ConditionalAccessPolicyStateDisabled,
					msgraph.ConditionalAccessPolicyStateEnabled,
					msgraph.ConditionalAccessPolicyStateEnabledForReportingButNotEnforced,
				}, false),
			},

			"conditions": {
				Type:     pluginsdk.TypeList,
				Required: true,
				MaxItems: 1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"applications": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"included_applications": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										ExactlyOneOf: []string{"conditions.0.applications.0.included_applications", "conditions.0.applications.0.included_user_actions"},
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_applications": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"included_user_actions": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										ExactlyOneOf: []string{"conditions.0.applications.0.included_applications", "conditions.0.applications.0.included_user_actions"},
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},
								},
							},
						},

						"client_applications": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"included_service_principals": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_service_principals": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},
								},
							},
						},

						"users": {
							Type:     pluginsdk.TypeList,
							Required: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"included_users": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										AtLeastOneOf: []string{"conditions.0.users.0.included_groups", "conditions.0.users.0.included_roles", "conditions.0.users.0.included_users", "conditions.0.users.0.included_guests_or_external_users"},
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_users": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"included_groups": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										AtLeastOneOf: []string{"conditions.0.users.0.included_groups", "conditions.0.users.0.included_roles", "conditions.0.users.0.included_users", "conditions.0.users.0.included_guests_or_external_users"},
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_groups": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"included_roles": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										AtLeastOneOf: []string{"conditions.0.users.0.included_groups", "conditions.0.users.0.included_roles", "conditions.0.users.0.included_users", "conditions.0.users.0.included_guests_or_external_users"},
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_roles": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"included_guests_or_external_users": {
										Type:         pluginsdk.TypeList,
										Optional:     true,
										AtLeastOneOf: []string{"conditions.0.users.0.included_groups", "conditions.0.users.0.included_roles", "conditions.0.users.0.included_users", "conditions.0.users.0.included_guests_or_external_users"},
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"guest_or_external_user_types": {
													Type:     pluginsdk.TypeList,
													Required: true,
													Elem: &pluginsdk.Schema{
														Type: pluginsdk.TypeString,
														ValidateFunc: validation.StringInSlice([]string{
															msgraph.ConditionalAccessGuestOrExternalUserTypeNone,
															msgraph.ConditionalAccessGuestOrExternalUserTypeInternalGuest,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bCollaborationGuest,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bCollaborationMember,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bDirectConnectUser,
															msgraph.ConditionalAccessGuestOrExternalUserTypeOtherExternalUser,
															msgraph.ConditionalAccessGuestOrExternalUserTypeServiceProvider,
															msgraph.ConditionalAccessGuestOrExternalUserTypeUnknownFutureValue,
														}, false),
													},
												},
												"external_tenants": {
													Type:     pluginsdk.TypeList,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"membership_kind": {
																Type:     pluginsdk.TypeString,
																Required: true,
																ValidateFunc: validation.StringInSlice([]string{
																	msgraph.ConditionalAccessExternalTenantsMembershipKindAll,
																	msgraph.ConditionalAccessExternalTenantsMembershipKindEnumerated,
																	msgraph.ConditionalAccessExternalTenantsMembershipKindUnknownFutureValue,
																}, false),
															},
															"members": {
																Type:     pluginsdk.TypeList,
																Optional: true,
																Elem: &pluginsdk.Schema{
																	Type:             pluginsdk.TypeString,
																	ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
																},
															},
														},
													},
												},
											},
										},
									},

									"excluded_guests_or_external_users": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"guest_or_external_user_types": {
													Type:     pluginsdk.TypeList,
													Required: true,
													Elem: &pluginsdk.Schema{
														Type: pluginsdk.TypeString,
														ValidateFunc: validation.StringInSlice([]string{
															msgraph.ConditionalAccessGuestOrExternalUserTypeNone,
															msgraph.ConditionalAccessGuestOrExternalUserTypeInternalGuest,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bCollaborationGuest,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bCollaborationMember,
															msgraph.ConditionalAccessGuestOrExternalUserTypeB2bDirectConnectUser,
															msgraph.ConditionalAccessGuestOrExternalUserTypeOtherExternalUser,
															msgraph.ConditionalAccessGuestOrExternalUserTypeServiceProvider,
															msgraph.ConditionalAccessGuestOrExternalUserTypeUnknownFutureValue,
														}, false),
													},
												},
												"external_tenants": {
													Type:     pluginsdk.TypeList,
													Optional: true,
													Elem: &pluginsdk.Resource{
														Schema: map[string]*pluginsdk.Schema{
															"membership_kind": {
																Type:     pluginsdk.TypeString,
																Required: true,
																ValidateFunc: validation.StringInSlice([]string{
																	msgraph.ConditionalAccessExternalTenantsMembershipKindAll,
																	msgraph.ConditionalAccessExternalTenantsMembershipKindEnumerated,
																	msgraph.ConditionalAccessExternalTenantsMembershipKindUnknownFutureValue,
																}, false),
															},
															"members": {
																Type:     pluginsdk.TypeList,
																Optional: true,
																Elem: &pluginsdk.Schema{
																	Type:             pluginsdk.TypeString,
																	ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"client_app_types": {
							Type:     pluginsdk.TypeList,
							Required: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
								ValidateFunc: validation.StringInSlice([]string{
									msgraph.ConditionalAccessClientAppTypeAll,
									msgraph.ConditionalAccessClientAppTypeBrowser,
									msgraph.ConditionalAccessClientAppTypeEasSupported,
									msgraph.ConditionalAccessClientAppTypeExchangeActiveSync,
									msgraph.ConditionalAccessClientAppTypeMobileAppsAndDesktopClients,
									msgraph.ConditionalAccessClientAppTypeOther,
								}, false),
							},
						},

						"devices": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"filter": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										MaxItems: 1,
										Elem: &pluginsdk.Resource{
											Schema: map[string]*pluginsdk.Schema{
												"mode": {
													Type:     pluginsdk.TypeString,
													Required: true,
													ValidateFunc: validation.StringInSlice([]string{
														msgraph.ConditionalAccessFilterModeExclude,
														msgraph.ConditionalAccessFilterModeInclude,
													}, false),
												},

												"rule": {
													Type:             pluginsdk.TypeString,
													Required:         true,
													ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
												},
											},
										},
									},
								},
							},
						},

						"locations": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"included_locations": {
										Type:     pluginsdk.TypeList,
										Required: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},

									"excluded_locations": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type:             pluginsdk.TypeString,
											ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
										},
									},
								},
							},
						},

						"platforms": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &pluginsdk.Resource{
								Schema: map[string]*pluginsdk.Schema{
									"included_platforms": {
										Type:     pluginsdk.TypeList,
										Required: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice([]string{
												msgraph.ConditionalAccessDevicePlatformAll,
												msgraph.ConditionalAccessDevicePlatformAndroid,
												msgraph.ConditionalAccessDevicePlatformIos,
												msgraph.ConditionalAccessDevicePlatformLinux,
												msgraph.ConditionalAccessDevicePlatformMacOs,
												msgraph.ConditionalAccessDevicePlatformUnknownFutureValue,
												msgraph.ConditionalAccessDevicePlatformWindows,
												msgraph.ConditionalAccessDevicePlatformWindowsPhone,
											}, false),
										},
									},

									"excluded_platforms": {
										Type:     pluginsdk.TypeList,
										Optional: true,
										Elem: &pluginsdk.Schema{
											Type: pluginsdk.TypeString,
											ValidateFunc: validation.StringInSlice([]string{
												msgraph.ConditionalAccessDevicePlatformAll,
												msgraph.ConditionalAccessDevicePlatformAndroid,
												msgraph.ConditionalAccessDevicePlatformIos,
												msgraph.ConditionalAccessDevicePlatformLinux,
												msgraph.ConditionalAccessDevicePlatformMacOs,
												msgraph.ConditionalAccessDevicePlatformUnknownFutureValue,
												msgraph.ConditionalAccessDevicePlatformWindows,
												msgraph.ConditionalAccessDevicePlatformWindowsPhone,
											}, false),
										},
									},
								},
							},
						},

						"service_principal_risk_levels": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
								ValidateFunc: validation.StringInSlice([]string{
									msgraph.ConditionalAccessRiskLevelHigh,
									msgraph.ConditionalAccessRiskLevelLow,
									msgraph.ConditionalAccessRiskLevelMedium,
									msgraph.ConditionalAccessRiskLevelNone,
									msgraph.ConditionalAccessRiskLevelUnknownFutureValue,
								}, false),
							},
						},

						"sign_in_risk_levels": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
								ValidateFunc: validation.StringInSlice([]string{
									msgraph.ConditionalAccessRiskLevelHidden,
									msgraph.ConditionalAccessRiskLevelHigh,
									msgraph.ConditionalAccessRiskLevelLow,
									msgraph.ConditionalAccessRiskLevelMedium,
									msgraph.ConditionalAccessRiskLevelNone,
									msgraph.ConditionalAccessRiskLevelUnknownFutureValue,
								}, false),
							},
						},

						"user_risk_levels": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
								ValidateFunc: validation.StringInSlice([]string{
									msgraph.ConditionalAccessRiskLevelHidden,
									msgraph.ConditionalAccessRiskLevelHigh,
									msgraph.ConditionalAccessRiskLevelLow,
									msgraph.ConditionalAccessRiskLevelMedium,
									msgraph.ConditionalAccessRiskLevelNone,
									msgraph.ConditionalAccessRiskLevelUnknownFutureValue,
								}, false),
							},
						},
					},
				},
			},

			"grant_controls": {
				Type:         pluginsdk.TypeList,
				Optional:     true,
				AtLeastOneOf: []string{"grant_controls", "session_controls"},
				MaxItems:     1,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"operator": {
							Type:         pluginsdk.TypeString,
							Required:     true,
							ValidateFunc: validation.StringInSlice([]string{"AND", "OR"}, false),
						},

						"built_in_controls": {
							Type:         pluginsdk.TypeList,
							Optional:     true,
							AtLeastOneOf: []string{"grant_controls.0.built_in_controls", "grant_controls.0.authentication_strength_policy_id", "grant_controls.0.terms_of_use"},
							Elem: &pluginsdk.Schema{
								Type: pluginsdk.TypeString,
								ValidateFunc: validation.StringInSlice([]string{
									msgraph.ConditionalAccessGrantControlApprovedApplication,
									msgraph.ConditionalAccessGrantControlBlock,
									msgraph.ConditionalAccessGrantControlCompliantApplication,
									msgraph.ConditionalAccessGrantControlCompliantDevice,
									msgraph.ConditionalAccessGrantControlDomainJoinedDevice,
									msgraph.ConditionalAccessGrantControlMfa,
									msgraph.ConditionalAccessGrantControlPasswordChange,
									msgraph.ConditionalAccessGrantControlUnknownFutureValue,
								}, false),
							},
						},

						"authentication_strength_policy_id": {
							AtLeastOneOf: []string{"grant_controls.0.built_in_controls", "grant_controls.0.authentication_strength_policy_id", "grant_controls.0.terms_of_use"},
							Type:         pluginsdk.TypeString,
							Optional:     true,
							ValidateFunc: validation.IsUUID,
						},

						"custom_authentication_factors": {
							Type:     pluginsdk.TypeList,
							Optional: true,
							Elem: &pluginsdk.Schema{
								Type:             pluginsdk.TypeString,
								ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
							},
						},

						"terms_of_use": {
							Type:         pluginsdk.TypeList,
							Optional:     true,
							AtLeastOneOf: []string{"grant_controls.0.built_in_controls", "grant_controls.0.authentication_strength_policy_id", "grant_controls.0.terms_of_use"},
							Elem: &pluginsdk.Schema{
								Type:             pluginsdk.TypeString,
								ValidateDiagFunc: validation.ValidateDiag(validation.StringIsNotEmpty),
							},
						},
					},
				},
			},

			"session_controls": {
				Type:             pluginsdk.TypeList,
				Optional:         true,
				AtLeastOneOf:     []string{"grant_controls", "session_controls"},
				MaxItems:         1,
				DiffSuppressFunc: conditionalAccessPolicyDiffSuppress,
				Elem: &pluginsdk.Resource{
					Schema: map[string]*pluginsdk.Schema{
						"application_enforced_restrictions_enabled": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
						},

						"cloud_app_security_policy": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							ValidateFunc: validation.StringInSlice([]string{
								msgraph.ConditionalAccessCloudAppSecuritySessionControlTypeBlockDownloads,
								msgraph.ConditionalAccessCloudAppSecuritySessionControlTypeMcasConfigured,
								msgraph.ConditionalAccessCloudAppSecuritySessionControlTypeMonitorOnly,
								msgraph.ConditionalAccessCloudAppSecuritySessionControlTypeUnknownFutureValue,
							}, false),
						},

						"disable_resilience_defaults": {
							Type:     pluginsdk.TypeBool,
							Optional: true,
						},

						"persistent_browser_mode": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							ValidateFunc: validation.StringInSlice([]string{
								msgraph.PersistentBrowserSessionModeAlways,
								msgraph.PersistentBrowserSessionModeNever,
							}, false),
						},

						"sign_in_frequency": {
							Type:         pluginsdk.TypeInt,
							Optional:     true,
							RequiredWith: []string{"session_controls.0.sign_in_frequency_period"},
							ValidateFunc: validation.IntAtLeast(0),
						},

						"sign_in_frequency_authentication_type": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							Computed: true,
							ValidateFunc: validation.StringInSlice([]string{
								msgraph.ConditionalAccessAuthenticationTypePrimaryAndSecondaryAuthentication,
								msgraph.ConditionalAccessAuthenticationTypeSecondaryAuthentication,
							}, false),
						},

						"sign_in_frequency_interval": {
							Type:     pluginsdk.TypeString,
							Optional: true,
							Computed: true,
							ValidateFunc: validation.StringInSlice([]string{
								msgraph.ConditionalAccessFrequencyIntervalTimeBased,
								msgraph.ConditionalAccessFrequencyIntervalEveryTime,
							}, false),
						},

						"sign_in_frequency_period": {
							Type:         pluginsdk.TypeString,
							Optional:     true,
							RequiredWith: []string{"session_controls.0.sign_in_frequency"},
							ValidateFunc: validation.StringInSlice([]string{
								msgraph.ConditionalAccessFrequencyTypeDays,
								msgraph.ConditionalAccessFrequencyTypeHours,
							}, false),
						},
					},
				},
			},
		},
	}
}
