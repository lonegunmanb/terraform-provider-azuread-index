package github.com/hashicorp/terraform-provider-azuread/internal/services/approleassignments
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/approleassignments/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func appRoleAssignmentResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).AppRoleAssignments.AppRoleAssignedToClient

	id, err := parse.AppRoleAssignmentID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing app role assignment with ID %q", d.Id())
	}

	query := odata.Query{Filter: fmt.Sprintf("id eq '%s'", id.AssignmentId)}
	appRoleAssignments, status, err := client.List(ctx, id.ResourceId, query)
	if err != nil {
		if status == http.StatusNotFound {
			log.Printf("[DEBUG] Resource Service Principal %q was not found - removing from state!", id.ResourceId)
			d.SetId("")
			return nil
		}
		return tf.ErrorDiagF(err, "retrieving app role assignments for resource with object ID: %q", id.ResourceId)
	}
	if appRoleAssignments == nil {
		return tf.ErrorDiagF(errors.New("appRoleAssignments was nil"), "retrieving app role assignments for resource with object ID: %q", id.ResourceId)
	}

	var appRoleAssignment *msgraph.AppRoleAssignment
	for _, assignment := range *appRoleAssignments {
		if assignment.Id != nil && *assignment.Id == id.AssignmentId {
			appRoleAssignment = &assignment
			break
		}
	}
	if appRoleAssignment == nil {
		log.Printf("[DEBUG] App Role Assignment %q for Resource %q was not found - removing from state!", id.AssignmentId, id.ResourceId)
		d.SetId("")
		return nil
	}

	tf.Set(d, "app_role_id", appRoleAssignment.AppRoleId)
	tf.Set(d, "principal_display_name", appRoleAssignment.PrincipalDisplayName)
	tf.Set(d, "principal_object_id", appRoleAssignment.PrincipalId)
	tf.Set(d, "principal_type", appRoleAssignment.PrincipalType)
	tf.Set(d, "resource_display_name", appRoleAssignment.ResourceDisplayName)
	tf.Set(d, "resource_object_id", appRoleAssignment.ResourceId)

	return nil
}
