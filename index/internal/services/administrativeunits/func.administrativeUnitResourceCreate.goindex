package github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	administrativeunitBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/directory/stable/administrativeunit"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/directory/stable/administrativeunitmember"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits/migrations"
)
func administrativeUnitResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitClient
	memberClient := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitMemberClient

	displayName := d.Get("display_name").(string)

	// Perform this check at apply time to catch any duplicate names created during the same apply
	if d.Get("prevent_duplicate_names").(bool) {
		result, err := administrativeUnitFindByName(ctx, client, displayName)
		if err != nil {
			return tf.ErrorDiagPathF(err, "name", "Could not check for existing administrative unit(s)")
		}
		if result != nil && len(*result) > 0 {
			existingAu := (*result)[0]
			if existingAu.Id == nil {
				return tf.ErrorDiagF(errors.New("API returned administrative unit with nil object ID during duplicate name check"), "Bad API response")
			}
			return tf.ImportAsDuplicateDiag("azuread_administrative_unit", *existingAu.Id, displayName)
		}
	}

	properties := stable.AdministrativeUnit{
		DisplayName: nullable.Value(displayName),
		Visibility:  nullable.Value(administrativeUnitVisibilityPublic),
	}

	if v := d.Get("description").(string); v != "" {
		properties.Description = nullable.Value(v)
	}

	if d.Get("hidden_membership_enabled").(bool) {
		properties.Visibility = nullable.Value(administrativeUnitVisibilityHiddenMembership)
	}

	resp, err := client.CreateAdministrativeUnit(ctx, properties, administrativeunit.DefaultCreateAdministrativeUnitOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Creating administrative unit %q", displayName)
	}

	administrativeUnit := resp.Model
	if administrativeUnit == nil {
		return tf.ErrorDiagF(errors.New("API returned nil administrative unit"), "Bad API Response")
	}
	if administrativeUnit.Id == nil {
		return tf.ErrorDiagF(errors.New("API returned administrative unit with nil object ID"), "Bad API Response")
	}

	id := stable.NewDirectoryAdministrativeUnitID(*administrativeUnit.Id)
	d.SetId(id.ID())

	// Set a temporary display name as we'll attempt to patch the AU with the correct name after creating it
	uid, err := uuid.GenerateUUID()
	if err != nil {
		return tf.ErrorDiagF(err, "Failed to generate a UUID")
	}
	tempDisplayName := fmt.Sprintf("TERRAFORM_UPDATE_%s", uid)

	// Attempt to patch the newly created administrative unit with a temporary name, which will tell us whether it
	// exists yet. After, reset the name back to the correct name.
	// The SDK handles retries for us here in the event of 404, 429 or 5xx, then returns after giving up
	updateResp, err := client.UpdateAdministrativeUnit(ctx, id, stable.AdministrativeUnit{
		DisplayName: nullable.Value(tempDisplayName),
	}, administrativeunit.UpdateAdministrativeUnitOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			return response.WasNotFound(resp), nil
		},
	})
	if err != nil {
		if response.WasNotFound(updateResp.HttpResponse) {
			return tf.ErrorDiagF(err, "Timed out whilst waiting for new %s to be replicated in Azure AD", id)
		}
		return tf.ErrorDiagF(err, "Failed to patch %s after creating", id)
	}

	// Set correct original display name
	updateResp, err = client.UpdateAdministrativeUnit(ctx, id, stable.AdministrativeUnit{
		DisplayName: nullable.Value(displayName),
	}, administrativeunit.UpdateAdministrativeUnitOperationOptions{
		RetryFunc: func(resp *http.Response, o *odata.OData) (bool, error) {
			return response.WasNotFound(resp), nil
		},
	})
	if err != nil {
		if response.WasNotFound(updateResp.HttpResponse) {
			return tf.ErrorDiagF(err, "Timed out whilst waiting for new %s to be replicated in Azure AD", id)
		}
		return tf.ErrorDiagF(err, "Failed to patch %s after creating", id)
	}

	// Add members after the administrative unit is created
	if v, ok := d.GetOk("members"); ok {
		for _, memberIdRaw := range v.(*pluginsdk.Set).List() {
			memberId := stable.NewDirectoryObjectID(memberIdRaw.(string))

			addMemberProperties := stable.ReferenceCreate{
				ODataId: pointer.To(client.Client.BaseUri + memberId.ID()),
			}

			if _, err = memberClient.AddAdministrativeUnitMemberRef(ctx, id, addMemberProperties, administrativeunitmember.DefaultAddAdministrativeUnitMemberRefOperationOptions()); err != nil {
				return tf.ErrorDiagF(err, "Could not add member %q to %s", memberId, id)
			}
		}
	}

	return administrativeUnitResourceRead(ctx, d, meta)
}
