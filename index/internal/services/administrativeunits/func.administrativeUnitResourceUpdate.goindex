package github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	administrativeunitBeta "github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/directory/stable/administrativeunit"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/directory/stable/administrativeunitmember"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits/migrations"
)
func administrativeUnitResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitClient
	memberClient := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitMemberClient

	id, err := stable.ParseDirectoryAdministrativeUnitID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing ID")
	}

	displayName := d.Get("display_name").(string)

	tf.LockByName(administrativeUnitResourceName, id.AdministrativeUnitId)
	defer tf.UnlockByName(administrativeUnitResourceName, id.AdministrativeUnitId)

	// Perform this check at apply time to catch any duplicate names created during the same apply
	if d.Get("prevent_duplicate_names").(bool) {
		result, err := administrativeUnitFindByName(ctx, client, displayName)
		if err != nil {
			return tf.ErrorDiagPathF(err, "display_name", "Could not check for existing administrative unit(s)")
		}
		if result != nil && len(*result) > 0 {
			for _, existingAU := range *result {
				if existingAU.Id == nil {
					return tf.ErrorDiagF(errors.New("API returned administrative unit with nil object ID during duplicate name check"), "Bad API response")
				}

				if *existingAU.Id != id.AdministrativeUnitId {
					return tf.ImportAsDuplicateDiag("azuread_administrative_unit", *existingAU.Id, displayName)
				}
			}
		}
	}

	administrativeUnit := stable.AdministrativeUnit{
		Description: nullable.Value(d.Get("description").(string)),
		DisplayName: nullable.Value(displayName),
		Visibility:  nullable.Value(administrativeUnitVisibilityPublic),
	}

	if d.Get("hidden_membership_enabled").(bool) {
		administrativeUnit.Visibility = nullable.Value(administrativeUnitVisibilityHiddenMembership)
	}

	if _, err := client.UpdateAdministrativeUnit(ctx, *id, administrativeUnit, administrativeunit.DefaultUpdateAdministrativeUnitOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Updating %s", id)
	}

	if d.HasChange("members") {
		membersResp, err := memberClient.ListAdministrativeUnitMembers(ctx, *id, administrativeunitmember.DefaultListAdministrativeUnitMembersOperationOptions())
		if err != nil {
			return tf.ErrorDiagF(err, "Could not retrieve members for %s", id)
		}

		existingMembers := make([]string, 0)
		for _, member := range pointer.From(membersResp.Model) {
			existingMembers = append(existingMembers, pointer.From(member.DirectoryObject().Id))
		}
		desiredMembers := *tf.ExpandStringSlicePtr(d.Get("members").(*pluginsdk.Set).List())
		membersForRemoval := tf.Difference(existingMembers, desiredMembers)
		membersToAdd := tf.Difference(desiredMembers, existingMembers)

		for _, memberForRemoval := range membersForRemoval {
			if _, err = memberClient.RemoveAdministrativeUnitMemberRef(ctx, stable.NewDirectoryAdministrativeUnitIdMemberID(id.AdministrativeUnitId, memberForRemoval), administrativeunitmember.DefaultRemoveAdministrativeUnitMemberRefOperationOptions()); err != nil {
				return tf.ErrorDiagF(err, "Could not remove members from %s", id)
			}
		}

		for _, v := range membersToAdd {
			memberId := stable.NewDirectoryObjectID(v)

			addMemberProperties := stable.ReferenceCreate{
				ODataId: pointer.To(client.Client.BaseUri + memberId.ID()),
			}

			if _, err = memberClient.AddAdministrativeUnitMemberRef(ctx, *id, addMemberProperties, administrativeunitmember.DefaultAddAdministrativeUnitMemberRefOperationOptions()); err != nil {
				return tf.ErrorDiagF(err, "Could not add member %q to %s", memberId, id)
			}
		}
	}

	return administrativeUnitResourceRead(ctx, d, meta)
}
