package github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/directory/stable/administrativeunitscopedrolemember"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits/migrations"
)
func administrativeUnitRoleMemberResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitScopedRoleMemberClient

	memberId := d.Get("member_object_id").(string)
	administrativeUnitId := d.Get("administrative_unit_object_id").(string)

	properties := stable.ScopedRoleMembership{
		AdministrativeUnitId: &administrativeUnitId,
		RoleId:               pointer.To(d.Get("role_object_id").(string)),
		RoleMemberInfo: stable.BaseIdentityImpl{
			Id: nullable.Value(memberId),
		},
	}

	resp, err := client.CreateAdministrativeUnitScopedRoleMember(ctx, stable.NewDirectoryAdministrativeUnitID(administrativeUnitId), properties, administrativeunitscopedrolemember.DefaultCreateAdministrativeUnitScopedRoleMemberOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Adding role member %q to administrative unit %q", memberId, administrativeUnitId)
	}
	if resp.Model == nil {
		return tf.ErrorDiagF(errors.New("response was nil"), "Adding role member %q to administrative unit %q", memberId, administrativeUnitId)
	}

	id := stable.NewDirectoryAdministrativeUnitIdScopedRoleMemberID(pointer.From(resp.Model.AdministrativeUnitId), pointer.From(resp.Model.Id))
	d.SetId(id.ID())

	return administrativeUnitRoleMemberResourceRead(ctx, d, meta)
}
