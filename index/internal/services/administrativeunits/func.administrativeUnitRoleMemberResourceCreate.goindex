package github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits
import (
	"context"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/administrativeunits/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func administrativeUnitRoleMemberResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).AdministrativeUnits.AdministrativeUnitsClient

	memberID := pointer.To(d.Get("member_object_id").(string))
	adminUnitID := pointer.To(d.Get("administrative_unit_object_id").(string))

	properties := msgraph.ScopedRoleMembership{
		AdministrativeUnitId: adminUnitID,
		RoleId:               pointer.To(d.Get("role_object_id").(string)),
		RoleMemberInfo: &msgraph.Identity{
			Id: memberID,
		},
	}

	membership, _, err := client.AddScopedRoleMember(ctx, *properties.AdministrativeUnitId, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Adding role member %q to administrative unit %q", *memberID, *adminUnitID)
	}

	id := parse.NewAdministrativeUnitRoleMemberID(*membership.AdministrativeUnitId, *membership.Id)

	d.SetId(id.String())

	return administrativeUnitRoleMemberResourceRead(ctx, d, meta)
}
