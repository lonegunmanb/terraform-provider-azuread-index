package github.com/hashicorp/terraform-provider-azuread/internal/services/userflows
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identity/stable/userflowattribute"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/userflows/migrations"
)
func userFlowAttributeResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).UserFlows.UserFlowAttributeClient

	displayName := d.Get("display_name").(string)

	options := userflowattribute.ListUserFlowAttributesOperationOptions{
		Filter: pointer.To(fmt.Sprintf("displayName eq '%s'", displayName)),
	}
	if resp, err := client.ListUserFlowAttributes(ctx, options); err != nil {
		return tf.ErrorDiagF(err, "Checking for existing user flow attribute")
	} else if resp.Model != nil {
		for _, r := range *resp.Model {
			model := r.IdentityUserFlowAttribute()
			if model.Id != nil && strings.EqualFold(model.DisplayName.GetOrZero(), displayName) {
				return tf.ImportAsExistsDiag("azuread_user_flow_attribute", *model.Id)
			}
		}
	}

	attr := stable.BaseIdentityUserFlowAttributeImpl{
		DataType:    pointer.To(stable.IdentityUserFlowAttributeDataType(d.Get("data_type").(string))),
		Description: nullable.NoZero(d.Get("description").(string)),
		DisplayName: nullable.NoZero(displayName),
	}

	resp, err := client.CreateUserFlowAttribute(ctx, attr, userflowattribute.DefaultCreateUserFlowAttributeOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Creating user flow attribute")
	}

	if resp.Model == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Creating user flow attribute")
	}

	userFlowAttr := resp.Model.IdentityUserFlowAttribute()

	if userFlowAttr.Id == nil || *userFlowAttr.Id == "" {
		return tf.ErrorDiagF(errors.New("API returned user flow attribute with nil ID"), "Bad API Response")
	}

	id := stable.NewIdentityUserFlowAttributeID(*userFlowAttr.Id)
	d.SetId(id.ID())

	// Now ensure we can retrieve the attribute consistently
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetUserFlowAttribute(ctx, id, userflowattribute.DefaultGetUserFlowAttributeOperationOptions())
		if err != nil {
			if response.WasNotFound(resp.HttpResponse) {
				return pointer.To(false), nil
			}
			return pointer.To(false), err
		}
		return pointer.To(resp.Model != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for creation of %s", id)
	}

	return userFlowAttributeResourceRead(ctx, d, meta)
}
