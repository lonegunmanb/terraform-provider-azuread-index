package github.com/hashicorp/terraform-provider-azuread/internal/services/policies
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/rolemanagementpolicy"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/rolemanagementpolicyassignment"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/policies/parse"
)
func expandNotificationSettings(ruleId string, policyRules map[string]stable.UnifiedRoleManagementPolicyRule, data GroupRoleManagementPolicyNotificationSettings, recipientType string) stable.UnifiedRoleManagementPolicyNotificationRule {
	rule := stable.UnifiedRoleManagementPolicyNotificationRule{
		Id:                         pointer.To(ruleId),
		IsDefaultRecipientsEnabled: nullable.Value(data.DefaultRecipients),
		NotificationLevel:          nullable.Value(data.NotificationLevel),
		NotificationRecipients:     pointer.To(data.AdditionalRecipients),
		NotificationType:           nullable.Value("Email"),
		RecipientType:              nullable.Value(recipientType),
	}

	if existingRule, ok := policyRules[ruleId].(stable.UnifiedRoleManagementPolicyNotificationRule); ok {
		rule.Target = existingRule.Target
	}

	return rule
}
