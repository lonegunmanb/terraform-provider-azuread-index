package github.com/hashicorp/terraform-provider-azuread/internal/services/policies
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/claimsmappingpolicy"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/policies/migrations"
)
func claimsMappingPolicyResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).Policies.ClaimsMappingPolicyClient

	properties := stable.ClaimsMappingPolicy{
		Definition:  tf.ExpandStringSlice(d.Get("definition").([]interface{})),
		DisplayName: nullable.Value(d.Get("display_name").(string)),
	}

	resp, err := client.CreateClaimsMappingPolicy(ctx, properties, claimsmappingpolicy.DefaultCreateClaimsMappingPolicyOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Could not create Claims Mapping Policy")
	}

	claimsMappingPolicy := resp.Model
	if claimsMappingPolicy == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Could not create Claims Mapping Policy")
	}
	if claimsMappingPolicy.Id == nil {
		return tf.ErrorDiagF(errors.New("model return with nil ID"), "Could not create Claims Mapping Policy")
	}

	id := stable.NewPolicyClaimsMappingPolicyID(*claimsMappingPolicy.Id)
	d.SetId(id.ID())

	return claimsMappingPolicyResourceRead(ctx, d, meta)
}
