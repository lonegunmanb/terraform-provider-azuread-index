package github.com/hashicorp/terraform-provider-azuread/internal/services/policies
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/policies/migrations"
)
func authenticationStrengthPolicyUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*clients.Client).Policies.AuthenticationStrengthPolicyClient

	id, err := stable.ParsePolicyAuthenticationStrengthPolicyID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing ID")
	}

	properties := stable.AuthenticationStrengthPolicy{
		DisplayName: pointer.To(d.Get("display_name").(string)),
		Description: nullable.NoZero(d.Get("description").(string)),
	}

	if _, err := client.UpdateAuthenticationStrengthPolicy(ctx, *id, properties, authenticationstrengthpolicy.DefaultUpdateAuthenticationStrengthPolicyOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Could not update %s", id)
	}

	if d.HasChange("allowed_combinations") {
		allowedCombinations := make([]stable.AuthenticationMethodModes, 0)
		for _, v := range d.Get("allowed_combinations").(*pluginsdk.Set).List() {
			allowedCombinations = append(allowedCombinations, stable.AuthenticationMethodModes(v.(string)))
		}

		request := authenticationstrengthpolicy.UpdateAuthenticationStrengthPolicyAllowedCombinationsRequest{
			AllowedCombinations: pointer.To(allowedCombinations),
		}

		if _, err := client.UpdateAuthenticationStrengthPolicyAllowedCombinations(ctx, *id, request, authenticationstrengthpolicy.DefaultUpdateAuthenticationStrengthPolicyAllowedCombinationsOperationOptions()); err != nil {
			return tf.ErrorDiagF(err, "Could not update allowed combinations for %s", id)
		}
	}

	return authenticationStrengthPolicyRead(ctx, d, meta)
}
