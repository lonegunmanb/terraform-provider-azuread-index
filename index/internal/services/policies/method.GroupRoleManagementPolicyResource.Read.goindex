package github.com/hashicorp/terraform-provider-azuread/internal/services/policies
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/rolemanagementpolicy"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/rolemanagementpolicyassignment"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/policies/parse"
)
func (r GroupRoleManagementPolicyResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Policies.RoleManagementPolicyClient
			assignmentClient := metadata.Client.Policies.RoleManagementPolicyAssignmentClient

			policyId, err := parse.ParseRoleManagementPolicyID(metadata.ResourceData.Id())
			if err != nil {
				return fmt.Errorf("parsing policy ID: %v", err)
			}

			var model GroupRoleManagementPolicyModel
			if err = metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			id := stable.NewPolicyRoleManagementPolicyID(policyId.ID())

			policyOptions := rolemanagementpolicy.GetRoleManagementPolicyOperationOptions{
				Expand: &odata.Expand{
					Relationship: "*",
				},
			}

			policyResp, err := client.GetRoleManagementPolicy(ctx, id, policyOptions)
			if err != nil {
				return fmt.Errorf("retrieving %s: %v", id, err)
			}

			policy := policyResp.Model
			if policy == nil {
				return fmt.Errorf("retrieving %s: API error, model was nil", id)
			}

			assignmentOptions := rolemanagementpolicyassignment.ListRoleManagementPolicyAssignmentsOperationOptions{
				Filter: pointer.To(fmt.Sprintf("scopeType eq 'Group' and scopeId eq '%s' and policyId eq '%s'", policyId.ScopeId, id.UnifiedRoleManagementPolicyId)),
			}
			resp, err := assignmentClient.ListRoleManagementPolicyAssignments(ctx, assignmentOptions)
			if err != nil {
				return fmt.Errorf("retrieving %s: %v", id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: expected 1 assignment, got nil result", id)
			}
			if len(*resp.Model) != 1 {
				return fmt.Errorf("retrieving %s: expected 1 assignment, got %d", id, len(*resp.Model))
			}

			assignment := (*resp.Model)[0]

			model.Description = pointer.From(policy.Description)
			model.DisplayName = pointer.From(policy.DisplayName)
			model.GroupId = policy.ScopeId
			model.RoleId = assignment.RoleDefinitionId.GetOrZero()

			if len(model.EligibleAssignmentRules) == 0 {
				model.EligibleAssignmentRules = make([]GroupRoleManagementPolicyEligibleAssignmentRules, 1)
			}
			if len(model.ActiveAssignmentRules) == 0 {
				model.ActiveAssignmentRules = make([]GroupRoleManagementPolicyActiveAssignmentRules, 1)
			}
			if len(model.ActivationRules) == 0 {
				model.ActivationRules = make([]GroupRoleManagementPolicyActivationRules, 1)
			}
			if len(model.NotificationRules) == 0 {
				model.NotificationRules = make([]GroupRoleManagementPolicyNotificationEvents, 1)
			}
			if len(model.NotificationRules[0].EligibleActivations) == 0 {
				model.NotificationRules[0].EligibleActivations = make([]GroupRoleManagementPolicyNotificationRule, 1)
			}
			if len(model.NotificationRules[0].ActiveAssignments) == 0 {
				model.NotificationRules[0].ActiveAssignments = make([]GroupRoleManagementPolicyNotificationRule, 1)
			}
			if len(model.NotificationRules[0].EligibleAssignments) == 0 {
				model.NotificationRules[0].EligibleAssignments = make([]GroupRoleManagementPolicyNotificationRule, 1)
			}

			if policy.Rules != nil {
				for _, rule := range *policy.Rules {
					switch pointer.From(rule.UnifiedRoleManagementPolicyRule().Id) {
					case "Approval_EndUser_Assignment":
						model.ActivationRules[0].RequireApproval = rule.(stable.UnifiedRoleManagementPolicyApprovalRule).Setting.IsApprovalRequired.GetOrZero()
						primaryApprovers := make([]GroupRoleManagementPolicyApprover, 0)

						if rule.(stable.UnifiedRoleManagementPolicyApprovalRule).Setting != nil && rule.(stable.UnifiedRoleManagementPolicyApprovalRule).Setting.ApprovalStages != nil {
							if approvers := (*rule.(stable.UnifiedRoleManagementPolicyApprovalRule).Setting.ApprovalStages)[0].PrimaryApprovers; approvers != nil {
								for _, approver := range *approvers {
									switch {
									case pointer.From(approver.SubjectSet().ODataType) == "#microsoft.graph.singleUser":
										primaryApprovers = append(primaryApprovers, GroupRoleManagementPolicyApprover{
											ID:   approver.(stable.SingleUser).UserId.GetOrZero(),
											Type: "singleUser",
										})
									case pointer.From(approver.SubjectSet().ODataType) == "#microsoft.graph.groupMembers":
										primaryApprovers = append(primaryApprovers, GroupRoleManagementPolicyApprover{
											ID:   approver.(stable.GroupMembers).GroupId.GetOrZero(),
											Type: "groupMembers",
										})
									default:
										return fmt.Errorf("unknown approver type: %s", *approver.SubjectSet().ODataType)
									}
								}
							}
						}

						model.ActivationRules[0].ApprovalStages = []GroupRoleManagementPolicyApprovalStage{{PrimaryApprovers: primaryApprovers}}

					case "AuthenticationContext_EndUser_Assignment":
						if rule.(stable.UnifiedRoleManagementPolicyAuthenticationContextRule).ClaimValue.GetOrZero() != "" {
							model.ActivationRules[0].RequireConditionalAccessContext = rule.(stable.UnifiedRoleManagementPolicyAuthenticationContextRule).ClaimValue.GetOrZero()
						}

					case "Enablement_Admin_Assignment":
						model.ActiveAssignmentRules[0].RequireMultiFactorAuth = false
						model.ActiveAssignmentRules[0].RequireJustification = false

						if enabledRules := rule.(stable.UnifiedRoleManagementPolicyEnablementRule).EnabledRules; enabledRules != nil {
							for _, enabledRule := range *enabledRules {
								switch enabledRule {
								case "MultiFactorAuthentication":
									model.ActiveAssignmentRules[0].RequireMultiFactorAuth = true
								case "Justification":
									model.ActiveAssignmentRules[0].RequireJustification = true
								}
							}
						}

					case "Enablement_EndUser_Assignment":
						model.ActivationRules[0].RequireMultiFactorAuth = false
						model.ActivationRules[0].RequireJustification = false
						model.ActivationRules[0].RequireTicketInfo = false

						if enabledRules := rule.(stable.UnifiedRoleManagementPolicyEnablementRule).EnabledRules; enabledRules != nil {
							for _, enabledRule := range *enabledRules {
								switch enabledRule {
								case "MultiFactorAuthentication":
									model.ActivationRules[0].RequireMultiFactorAuth = true
								case "Justification":
									model.ActivationRules[0].RequireJustification = true
								case "Ticketing":
									model.ActivationRules[0].RequireTicketInfo = true
								}
							}
						}

					case "Expiration_Admin_Eligibility":
						model.EligibleAssignmentRules[0].ExpirationRequired = rule.(stable.UnifiedRoleManagementPolicyExpirationRule).IsExpirationRequired.GetOrZero()
						model.EligibleAssignmentRules[0].ExpireAfter = rule.(stable.UnifiedRoleManagementPolicyExpirationRule).MaximumDuration.GetOrZero()

					case "Expiration_Admin_Assignment":
						model.ActiveAssignmentRules[0].ExpirationRequired = rule.(stable.UnifiedRoleManagementPolicyExpirationRule).IsExpirationRequired.GetOrZero()
						model.ActiveAssignmentRules[0].ExpireAfter = rule.(stable.UnifiedRoleManagementPolicyExpirationRule).MaximumDuration.GetOrZero()

					case "Expiration_EndUser_Assignment":
						model.ActivationRules[0].MaximumDuration = rule.(stable.UnifiedRoleManagementPolicyExpirationRule).MaximumDuration.GetOrZero()

					case "Notification_Admin_Admin_Assignment":
						model.NotificationRules[0].ActiveAssignments[0].AdminNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Admin_Admin_Eligibility":
						model.NotificationRules[0].EligibleAssignments[0].AdminNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Admin_EndUser_Assignment":
						model.NotificationRules[0].EligibleActivations[0].AdminNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Approver_Admin_Assignment":
						model.NotificationRules[0].ActiveAssignments[0].ApproverNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Approver_Admin_Eligibility":
						model.NotificationRules[0].EligibleAssignments[0].ApproverNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Approver_EndUser_Assignment":
						model.NotificationRules[0].EligibleActivations[0].ApproverNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Requestor_Admin_Assignment":
						model.NotificationRules[0].ActiveAssignments[0].AssigneeNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Requestor_Admin_Eligibility":
						model.NotificationRules[0].EligibleAssignments[0].AssigneeNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}

					case "Notification_Requestor_EndUser_Assignment":
						model.NotificationRules[0].EligibleActivations[0].AssigneeNotifications = []GroupRoleManagementPolicyNotificationSettings{
							flattenNotificationSettings(rule.(stable.UnifiedRoleManagementPolicyNotificationRule)),
						}
					}
				}
			}

			return metadata.Encode(&model)
		},
	}
}
