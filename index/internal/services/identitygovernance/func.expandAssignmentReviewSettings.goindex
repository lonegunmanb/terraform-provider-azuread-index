package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)
func expandAssignmentReviewSettings(input []interface{}) (*beta.AssignmentReviewSettings, error) {
	if len(input) == 0 {
		return nil, nil
	}

	in := input[0].(map[string]interface{})

	result := beta.AssignmentReviewSettings{
		AccessReviewTimeoutBehavior:     pointer.To(beta.AccessReviewTimeoutBehavior(in["access_review_timeout_behavior"].(string))),
		DurationInDays:                  nullable.Value(int64(in["duration_in_days"].(int))),
		IsAccessRecommendationEnabled:   nullable.Value(in["access_recommendation_enabled"].(bool)),
		IsApprovalJustificationRequired: nullable.Value(in["approver_justification_required"].(bool)),
		IsEnabled:                       nullable.Value(in["enabled"].(bool)),
		RecurrenceType:                  nullable.NoZero(in["review_frequency"].(string)),
		ReviewerType:                    nullable.NoZero(in["review_type"].(string)),
		StartDateTime:                   nullable.NoZero(in["starting_on"].(string)),
	}

	if _, ok := in["reviewer"]; ok {
		reviewers, err := expandUserSets(in["reviewer"].([]interface{}))
		if err != nil {
			return nil, fmt.Errorf("building `reviewer`: %v", err)
		}
		result.Reviewers = reviewers
	}

	if pointer.From(result.AccessReviewTimeoutBehavior) == "" && result.DurationInDays.GetOrZero() == 0 &&
		!result.IsAccessRecommendationEnabled.GetOrZero() && !result.IsApprovalJustificationRequired.GetOrZero() &&
		!result.IsEnabled.GetOrZero() && result.RecurrenceType.GetOrZero() == "" &&
		result.ReviewerType.GetOrZero() == "" && len(pointer.From(result.Reviewers)) == 0 {
		return nil, nil
	}

	return &result, nil
}
