package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
)
func buildScheduleRequest(model *PrivilegedAccessGroupScheduleModel, metadata *sdk.ResourceMetaData) (*stable.RequestSchedule, error) {
	schedule := stable.RequestSchedule{
		Expiration:    &stable.ExpirationPattern{},
		StartDateTime: nullable.NoZero(model.StartDate),
	}
	var startDate, expiryDate time.Time

	if model.StartDate != "" {
		var err error
		startDate, err = time.Parse(time.RFC3339, model.StartDate)
		if err != nil {
			return nil, fmt.Errorf("parsing %s: %+v", model.StartDate, err)
		}
	}

	switch {
	case model.ExpirationDate != "":
		var err error
		expiryDate, err = time.Parse(time.RFC3339, model.ExpirationDate)
		if err != nil {
			return nil, fmt.Errorf("parsing %s: %+v", model.ExpirationDate, err)
		}

		if model.StartDate != "" && expiryDate.Before(startDate.Add(5*time.Minute)) {
			return nil, fmt.Errorf("`expiration_date` must be at least 5 minutes after `start_date`")
		}

		if metadata.ResourceData.HasChange("expiry_date") && expiryDate.Before(time.Now().Add(5*time.Minute)) {
			return nil, fmt.Errorf("`expiration_date` must be at least 5 minutes in the future")
		}

		schedule.Expiration.EndDateTime = nullable.Value(model.ExpirationDate)
		schedule.Expiration.Type = pointer.To(stable.ExpirationPatternType_AfterDateTime)

	case model.Duration != "":
		schedule.Expiration.Duration = nullable.Value(model.Duration)
		schedule.Expiration.Type = pointer.To(stable.ExpirationPatternType_AfterDuration)

	case model.PermanentAssignment:
		schedule.Expiration.Type = pointer.To(stable.ExpirationPatternType_NoExpiration)

	default:
		return nil, fmt.Errorf("either `expiration_date` or `duration` must be set, or `permanent_assignment` must be true")
	}

	return &schedule, nil
}
