package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func buildScheduleRequest(model *PrivilegedAccessGroupScheduleModel, metadata *sdk.ResourceMetaData) (*msgraph.RequestSchedule, error) {
	schedule := msgraph.RequestSchedule{}
	schedule.Expiration = &msgraph.ExpirationPattern{}
	var startDate, expiryDate time.Time
	var err error

	if model.StartDate != "" {
		startDate, err = time.Parse(time.RFC3339, model.StartDate)
		if err != nil {
			return nil, fmt.Errorf("parsing %s: %+v", model.StartDate, err)
		}
		if metadata.ResourceData.HasChange("start_date") {
			if startDate.Before(time.Now()) {
				return nil, fmt.Errorf("start_date must be in the future")
			}
		}
		schedule.StartDateTime = &startDate
	}

	switch {
	case model.ExpirationDate != "":
		expiryDate, err = time.Parse(time.RFC3339, model.ExpirationDate)
		if err != nil {
			return nil, fmt.Errorf("parsing %s: %+v", model.ExpirationDate, err)
		}
		if metadata.ResourceData.HasChange("expiry_date") {
			if expiryDate.Before(time.Now().Add(5 * time.Minute)) {
				return nil, fmt.Errorf("expiry_date must be at least 5 minutes in the future")
			}
		}
		schedule.Expiration.EndDateTime = &expiryDate
		schedule.Expiration.Type = pointer.To(msgraph.ExpirationPatternTypeAfterDateTime)
	case model.Duration != "":
		schedule.Expiration.Duration = &model.Duration
		schedule.Expiration.Type = pointer.To(msgraph.ExpirationPatternTypeAfterDuration)
	case model.PermanentAssignment:
		schedule.Expiration.Type = pointer.To(msgraph.ExpirationPatternTypeNoExpiration)
	default:
		return nil, fmt.Errorf("either expiration_date or duration must be set, or permanent_assignment must be true")
	}

	if model.StartDate != "" && model.ExpirationDate != "" {
		if expiryDate.Before(startDate.Add(5 * time.Minute)) {
			return nil, fmt.Errorf("expiration_date must be at least 5 minutes after start_date")
		}
	}

	return &schedule, nil
}
