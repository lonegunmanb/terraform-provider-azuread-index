package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func accessPackageResourceUpdate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).IdentityGovernance.AccessPackageClient
	accessPackageCatalogClient := meta.(*clients.Client).IdentityGovernance.AccessPackageCatalogClient

	objectId := d.Id()
	catalogId := d.Get("catalog_id").(string)

	accessPackageCatalog, _, err := accessPackageCatalogClient.Get(ctx, catalogId, odata.Query{})
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving access package catalog with ID: %q", catalogId)
	}

	tf.LockByName(accessPackageResourceName, objectId)
	defer tf.UnlockByName(accessPackageResourceName, objectId)

	properties := msgraph.AccessPackage{
		ID:          pointer.To(objectId),
		DisplayName: pointer.To(d.Get("display_name").(string)),
		Description: pointer.To(d.Get("description").(string)),
		IsHidden:    pointer.To(d.Get("hidden").(bool)),
		Catalog:     accessPackageCatalog,
		CatalogId:   accessPackageCatalog.ID,
	}

	if _, err := client.Update(ctx, properties); err != nil {
		return tf.ErrorDiagF(err, "Could not update access package with ID: %q", objectId)
	}

	return accessPackageResourceRead(ctx, d, meta)
}
