package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/manicminer/hamilton/msgraph"
)
func (r PrivilegedAccessGroupEligibilityScheduleResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			scheduleClient := metadata.Client.IdentityGovernance.PrivilegedAccessGroupEligibilityScheduleClient
			requestsClient := metadata.Client.IdentityGovernance.PrivilegedAccessGroupEligibilityScheduleRequestsClient

			id, err := parse.ParsePrivilegedAccessGroupScheduleID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model PrivilegedAccessGroupScheduleModel
			if err = metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			schedule, scheduleStatus, err := scheduleClient.Get(ctx, id.ID())
			if err != nil && scheduleStatus != http.StatusNotFound {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			var request *msgraph.PrivilegedAccessGroupEligibilityScheduleRequest

			// Some details are only available on the request which is used for the create/update of the schedule.
			// Schedule requests are never deleted. New ones are created when changes are made.
			// Therefore on a read, we need to find the latest version of the request.
			// This is to cater for changes being made outside of Terraform.
			requests, _, err := requestsClient.List(ctx, odata.Query{
				Filter: fmt.Sprintf("groupId eq '%s' and targetScheduleId eq '%s'", id.GroupId, id.ID()),
				OrderBy: odata.OrderBy{
					Field:     "createdDateTime",
					Direction: odata.Descending,
				},
			})
			if err != nil {
				return fmt.Errorf("listing requests: %+v", err)
			}
			if requests == nil || len(*requests) == 0 {
				if scheduleStatus == http.StatusNotFound {
					// No request and no schedule was found
					return metadata.MarkAsGone(id)
				}
			} else {
				request = pointer.To((*requests)[0])
			}

			var scheduleInfo *msgraph.RequestSchedule

			if request != nil {
				// The request is still present, populate from the request
				scheduleInfo = request.ScheduleInfo

				model.AssignmentType = request.AccessId
				model.GroupId = pointer.From(request.GroupId)
				model.Justification = pointer.From(request.Justification)
				model.PrincipalId = pointer.From(request.PrincipalId)
				model.Status = request.Status

				if ticketInfo := request.TicketInfo; ticketInfo != nil {
					model.TicketNumber = pointer.From(ticketInfo.TicketNumber)
					model.TicketSystem = pointer.From(ticketInfo.TicketSystem)
				}
			} else {
				// The request has likely expired, so populate from the schedule
				scheduleInfo = schedule.ScheduleInfo

				model.AssignmentType = schedule.AccessId
				model.GroupId = pointer.From(schedule.GroupId)
				model.PrincipalId = pointer.From(schedule.PrincipalId)
				model.Status = schedule.Status
			}

			if scheduleInfo != nil {
				if expiration := scheduleInfo.Expiration; expiration != nil {
					model.Duration = pointer.From(expiration.Duration)

					if expiration.EndDateTime != nil {
						model.ExpirationDate = expiration.EndDateTime.Format(time.RFC3339)
					}
					if expiration.Type != nil {
						model.PermanentAssignment = *expiration.Type == msgraph.ExpirationPatternTypeNoExpiration
					}
				}
				if scheduleInfo.StartDateTime != nil {
					model.StartDate = scheduleInfo.StartDateTime.Format(time.RFC3339)
				}
			}

			return metadata.Encode(&model)
		},
	}
}
