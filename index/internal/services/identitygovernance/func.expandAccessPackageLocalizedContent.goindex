package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)
func expandAccessPackageLocalizedContent(input map[string]interface{}) *beta.AccessPackageLocalizedContent {
	if len(input) == 0 {
		return nil
	}

	result := beta.AccessPackageLocalizedContent{
		DefaultText: nullable.NoZero(input["default_text"].(string)),
	}

	texts := make([]beta.AccessPackageLocalizedText, 0)

	if _, ok := input["localized_text"]; ok {
		for _, raw := range input["localized_text"].([]interface{}) {
			v := raw.(map[string]interface{})

			texts = append(texts, beta.AccessPackageLocalizedText{
				LanguageCode: nullable.NoZero(v["language_code"].(string)),
				Text:         nullable.NoZero(v["content"].(string)),
			})
		}
	}

	result.LocalizedTexts = &texts

	return &result
}
