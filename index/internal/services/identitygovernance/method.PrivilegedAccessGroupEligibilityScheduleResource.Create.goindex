package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/stable/privilegedaccessgroupeligibilityschedule"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/stable/privilegedaccessgroupeligibilityschedulerequest"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance/parse"
)
func (r PrivilegedAccessGroupEligibilityScheduleResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.IdentityGovernance.PrivilegedAccessGroupEligibilityScheduleRequestClient

			var model PrivilegedAccessGroupScheduleModel
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			schedule, err := buildScheduleRequest(&model, &metadata)
			if err != nil {
				return err
			}

			properties := stable.PrivilegedAccessGroupEligibilityScheduleRequest{
				AccessId:      stable.PrivilegedAccessGroupRelationships(model.AssignmentType),
				PrincipalId:   nullable.Value(model.PrincipalId),
				GroupId:       nullable.Value(model.GroupId),
				Action:        pointer.To(stable.ScheduleRequestActions_AdminAssign),
				Justification: nullable.NoZero(model.Justification),
				ScheduleInfo:  schedule,
			}

			if model.TicketNumber != "" || model.TicketSystem != "" {
				properties.TicketInfo = &stable.TicketInfo{
					TicketNumber: nullable.NoZero(model.TicketNumber),
					TicketSystem: nullable.NoZero(model.TicketSystem),
				}
			}

			resp, err := client.CreatePrivilegedAccessGroupEligibilityScheduleRequest(ctx, properties, privilegedaccessgroupeligibilityschedulerequest.DefaultCreatePrivilegedAccessGroupEligibilityScheduleRequestOperationOptions())
			if err != nil {
				return fmt.Errorf("creating eligibility schedule request: %v", err)
			}

			request := resp.Model
			if request == nil {
				return fmt.Errorf("creating eligibility schedule request: model was nil")
			}
			if request.Id == nil || *request.Id == "" {
				return fmt.Errorf("creating eligibility schedule request: ID returned for request is nil/empty")
			}

			if pointer.From(request.Status) == PrivilegedAccessGroupScheduleRequestStatusFailed {
				return fmt.Errorf("creating eligibility schedule request: request is in a failed state")
			}

			resourceId, err := parse.ParsePrivilegedAccessGroupScheduleID(request.TargetScheduleId.GetOrZero())
			if err != nil {
				return err
			}

			metadata.SetID(resourceId)

			return nil
		},
	}
}
