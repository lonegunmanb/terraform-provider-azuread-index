package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/stable/privilegedaccessgroupassignmentschedule"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/stable/privilegedaccessgroupassignmentschedulerequest"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/sdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance/parse"
)
func (r PrivilegedAccessGroupAssignmentScheduleResource) Delete() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.IdentityGovernance.PrivilegedAccessGroupAssignmentScheduleRequestClient

			resourceId, err := parse.ParsePrivilegedAccessGroupScheduleID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var model PrivilegedAccessGroupScheduleModel
			if err = metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding: %+v", err)
			}

			switch model.Status {
			case PrivilegedAccessGroupScheduleRequestStatusDenied,
				PrivilegedAccessGroupScheduleRequestStatusFailed,
				PrivilegedAccessGroupScheduleRequestStatusGranted,
				PrivilegedAccessGroupScheduleRequestStatusPendingAdminDecision,
				PrivilegedAccessGroupScheduleRequestStatusPendingApproval,
				PrivilegedAccessGroupScheduleRequestStatusPendingProvisioning,
				PrivilegedAccessGroupScheduleRequestStatusPendingScheduleCreation:
				return cancelAssignmentRequest(ctx, metadata, client, stable.NewIdentityGovernancePrivilegedAccessGroupAssignmentScheduleRequestID(resourceId.ID()))
			case PrivilegedAccessGroupScheduleRequestStatusProvisioned,
				PrivilegedAccessGroupScheduleRequestStatusScheduleCreated:
				return revokeAssignmentRequest(ctx, metadata, client, *resourceId, model)
			case PrivilegedAccessGroupScheduleRequestStatusCanceled,
				PrivilegedAccessGroupScheduleRequestStatusRevoked:
				return metadata.MarkAsGone(resourceId)
			}

			return fmt.Errorf("unable to destroy due to unknown status: %s", model.Status)
		},
	}
}
