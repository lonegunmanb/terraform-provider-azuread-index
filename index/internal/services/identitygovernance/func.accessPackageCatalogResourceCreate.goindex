package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func accessPackageCatalogResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).IdentityGovernance.AccessPackageCatalogClient

	displayName := d.Get("display_name").(string)

	state := msgraph.AccessPackageCatalogStateUnpublished
	if d.Get("published").(bool) {
		state = msgraph.AccessPackageCatalogStatePublished
	}

	properties := msgraph.AccessPackageCatalog{
		DisplayName:         pointer.To(displayName),
		Description:         pointer.To(d.Get("description").(string)),
		State:               state,
		IsExternallyVisible: pointer.To(d.Get("externally_visible").(bool)),
	}

	accessPackageCatalog, _, err := client.Create(ctx, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Creating access package catalog %q", displayName)
	}

	d.SetId(*accessPackageCatalog.ID)

	return accessPackageCatalogResourceRead(ctx, d, meta)
}
