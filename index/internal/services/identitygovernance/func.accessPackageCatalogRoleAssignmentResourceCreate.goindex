package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/sdk/odata"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/validation"
	"github.com/manicminer/hamilton/msgraph"
)
func accessPackageCatalogRoleAssignmentResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).IdentityGovernance.AccessPackageCatalogRoleAssignmentsClient

	catalogId := d.Get("catalog_id").(string)
	principalId := d.Get("principal_object_id").(string)
	roleId := d.Get("role_id").(string)

	properties := msgraph.UnifiedRoleAssignment{
		DirectoryScopeId: pointer.To("/"),
		PrincipalId:      pointer.To(principalId),
		RoleDefinitionId: pointer.To(roleId),
		AppScopeId:       pointer.To("/AccessPackageCatalog/" + catalogId),
	}

	assignment, status, err := client.Create(ctx, properties)
	if err != nil {
		return tf.ErrorDiagF(err, "Assigning catalog role %q to directory principal %q on catalog %q, received %d with error: %+v", roleId, principalId, catalogId, status, err)
	}
	if assignment == nil || assignment.ID() == nil {
		return tf.ErrorDiagF(errors.New("returned role assignment ID was nil"), "API Error")
	}

	d.SetId(*assignment.ID())
	return accessPackageCatalogRoleAssignmentResourceRead(ctx, d, meta)
}
