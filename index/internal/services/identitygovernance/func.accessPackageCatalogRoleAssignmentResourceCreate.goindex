package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/rolemanagement/beta/entitlementmanagementroleassignment"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
)
func accessPackageCatalogRoleAssignmentResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).IdentityGovernance.RoleAssignmentClient

	catalogId := d.Get("catalog_id").(string)
	principalId := d.Get("principal_object_id").(string)

	roleId := beta.NewRoleManagementEntitlementManagementRoleDefinitionID(d.Get("role_id").(string))

	properties := beta.UnifiedRoleAssignment{
		DirectoryScopeId: nullable.Value("/"),
		PrincipalId:      nullable.Value(principalId),
		RoleDefinitionId: nullable.Value(roleId.UnifiedRoleDefinitionId),
		AppScopeId:       nullable.Value(fmt.Sprintf("/AccessPackageCatalog/%s", catalogId)),

		OmitDiscriminatedValue: true,
	}

	createMsg := `Assigning catalog role %q to directory principal %q on catalog %q`
	resp, err := client.CreateEntitlementManagementRoleAssignment(ctx, properties, entitlementmanagementroleassignment.DefaultCreateEntitlementManagementRoleAssignmentOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, createMsg, roleId, principalId, catalogId)
	}

	assignment := resp.Model
	if assignment == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), createMsg, roleId, principalId, catalogId)
	}
	if assignment.Id == nil {
		return tf.ErrorDiagF(errors.New("model has nil ID"), createMsg, roleId, principalId, catalogId)
	}

	id := beta.NewRoleManagementEntitlementManagementRoleAssignmentID(*assignment.Id)
	d.SetId(id.UnifiedRoleAssignmentId)

	return accessPackageCatalogRoleAssignmentResourceRead(ctx, d, meta)
}
