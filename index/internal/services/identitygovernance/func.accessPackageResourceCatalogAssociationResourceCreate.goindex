package github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/beta"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackagecatalog"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackagecatalogaccesspackageresource"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackageresourcerequest"
	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
	"github.com/hashicorp/terraform-provider-azuread/internal/clients"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance/parse"
	"github.com/hashicorp/terraform-provider-azuread/internal/services/identitygovernance/validate"
)
func accessPackageResourceCatalogAssociationResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).IdentityGovernance.AccessPackageResourceRequestClient
	accessPackageCatalogClient := meta.(*clients.Client).IdentityGovernance.AccessPackageCatalogClient
	resourceClient := meta.(*clients.Client).IdentityGovernance.AccessPackageCatalogResourceClient

	resourceOriginId := d.Get("resource_origin_id").(string)
	resourceOriginSystem := d.Get("resource_origin_system").(string)

	catalogId := beta.NewIdentityGovernanceEntitlementManagementAccessPackageCatalogID(d.Get("catalog_id").(string))

	catalogResp, err := accessPackageCatalogClient.GetEntitlementManagementAccessPackageCatalog(ctx, catalogId, entitlementmanagementaccesspackagecatalog.DefaultGetEntitlementManagementAccessPackageCatalogOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Retrieving access package catalog with object ID: %q", catalogId)
	}

	catalog := catalogResp.Model
	if catalog == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", catalogId)
	}

	options := entitlementmanagementaccesspackagecatalogaccesspackageresource.ListEntitlementManagementAccessPackageCatalogResourcesOperationOptions{
		Filter: pointer.To(fmt.Sprintf("originId eq '%s'", resourceOriginId)),
	}
	existingResp, err := resourceClient.ListEntitlementManagementAccessPackageCatalogResources(ctx, catalogId, options)
	if err != nil {
		return tf.ErrorDiagF(err, "Checking for existing Access Package Resource Catalog Association")
	}
	if existingResp.Model != nil && len(*existingResp.Model) > 0 {
		importId := parse.NewAccessPackageResourceCatalogAssociationID(resourceOriginId, resourceOriginId)
		return tf.ImportAsExistsDiag("azuread_access_package_resource_catalog_association", importId.ID())
	}

	properties := beta.AccessPackageResourceRequest{
		CatalogId:          nullable.Value(catalogId.AccessPackageCatalogId),
		ExecuteImmediately: nullable.Value(true),
		RequestType:        nullable.Value("AdminAdd"),
		AccessPackageResource: &beta.AccessPackageResource{
			OriginId:     nullable.Value(resourceOriginId),
			OriginSystem: nullable.Value(resourceOriginSystem),
		},
	}

	if _, err = client.CreateEntitlementManagementAccessPackageResourceRequest(ctx, properties, entitlementmanagementaccesspackageresourcerequest.DefaultCreateEntitlementManagementAccessPackageResourceRequestOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Failed to request Access Package Resource Catalog Association (Catalog ID: %q / Origin ID: %q)", catalogId, resourceOriginId)
	}

	// Poll for processed request
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		options := entitlementmanagementaccesspackagecatalogaccesspackageresource.ListEntitlementManagementAccessPackageCatalogResourcesOperationOptions{
			Filter: pointer.To(fmt.Sprintf("startswith(originId, '%s')", resourceOriginId)),
		}
		resp, err := resourceClient.ListEntitlementManagementAccessPackageCatalogResources(ctx, catalogId, options)
		if err != nil {
			return nil, err
		}
		if resp.Model == nil || len(*resp.Model) == 0 {
			return pointer.To(false), nil
		}
		return pointer.To(true), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for processing of Access Package Resource Request (Catalog ID: %q / Origin ID: %q)", catalogId, resourceOriginId)
	}

	resourceId := parse.NewAccessPackageResourceCatalogAssociationID(catalogId.AccessPackageCatalogId, resourceOriginId)
	d.SetId(resourceId.ID())

	return accessPackageResourceCatalogAssociationResourceRead(ctx, d, meta)
}
