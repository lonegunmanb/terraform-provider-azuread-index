package github.com/hashicorp/terraform-provider-azuread/internal/helpers
import (
	"bytes"
	"crypto/sha1"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"encoding/pem"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-provider-azuread/internal/tf/pluginsdk"
	"github.com/manicminer/hamilton/msgraph"
)
func PasswordCredential(in map[string]interface{}) (*msgraph.PasswordCredential, error) {
	credential := msgraph.PasswordCredential{}

	if v, ok := in["display_name"]; ok {
		credential.DisplayName = pointer.To(v.(string))
	}

	if v, ok := in["start_date"]; ok && v.(string) != "" {
		startDate, err := time.Parse(time.RFC3339, v.(string))
		if err != nil {
			return nil, CredentialError{str: fmt.Sprintf("Unable to parse the provided start date %q: %+v", v, err), attr: "start_date"}
		}
		credential.StartDateTime = &startDate
	}

	if v, ok := in["end_date"]; ok && v.(string) != "" {
		var err error
		expiry, err := time.Parse(time.RFC3339, v.(string))
		if err != nil {
			return nil, CredentialError{str: fmt.Sprintf("Unable to parse the provided end date %q: %+v", v, err), attr: "end_date"}
		}

		credential.EndDateTime = &expiry
	}

	if v, ok := in["key_id"]; ok && v.(string) != "" {
		credential.KeyId = pointer.To(v.(string))
	}

	if v, ok := in["value"]; ok && v.(string) != "" {
		credential.SecretText = pointer.To(v.(string))
	}

	return &credential, nil
}
