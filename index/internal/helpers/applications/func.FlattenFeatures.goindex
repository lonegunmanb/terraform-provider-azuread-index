package github.com/hashicorp/terraform-provider-azuread/internal/helpers/applications
import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/owner"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
)
func FlattenFeatures(tags *[]string, deprecated bool) []interface{} {
	// TODO: remove this in v3.0
	if deprecated {
		result := map[string]bool{
			"custom_single_sign_on_app": false,
			"enterprise_application":    false,
			"gallery_application":       false,
			"visible_to_users":          true,
		}

		if tags == nil || len(*tags) == 0 {
			return []interface{}{result}
		}

		for _, tag := range *tags {
			if strings.EqualFold(tag, "WindowsAzureActiveDirectoryCustomSingleSignOnApplication") {
				result["custom_single_sign_on_app"] = true
			}
			if strings.EqualFold(tag, "WindowsAzureActiveDirectoryIntegratedApp") {
				result["enterprise_application"] = true
			}
			if strings.EqualFold(tag, "WindowsAzureActiveDirectoryGalleryApplicationNonPrimaryV1") {
				result["gallery_application"] = true
			}
			if strings.EqualFold(tag, "HideApp") {
				result["visible_to_users"] = false
			}
		}

		return []interface{}{result}
	}

	result := map[string]bool{
		"custom_single_sign_on": false,
		"enterprise":            false,
		"gallery":               false,
		"hide":                  false,
	}

	if tags == nil || len(*tags) == 0 {
		return []interface{}{result}
	}

	for _, tag := range *tags {
		switch {
		case strings.EqualFold(tag, "WindowsAzureActiveDirectoryCustomSingleSignOnApplication"):
			result["custom_single_sign_on"] = true
		case strings.EqualFold(tag, "WindowsAzureActiveDirectoryIntegratedApp"):
			result["enterprise"] = true
		case strings.EqualFold(tag, "WindowsAzureActiveDirectoryGalleryApplicationNonPrimaryV1"):
			result["gallery"] = true
		case strings.EqualFold(tag, "HideApp"):
			result["hide"] = true
		}
	}

	return []interface{}{result}
}
